<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Introduction on Lucas dos Santos Abreu</title><link>https://www.lucassabreu.net.br/preview/8/tags/introduction/</link><description>Recent content in Introduction on Lucas dos Santos Abreu</description><generator>Hugo -- gohugo.io</generator><language>pt-BR</language><lastBuildDate>Fri, 10 Mar 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://www.lucassabreu.net.br/preview/8/tags/introduction/index.xml" rel="self" type="application/rss+xml"/><item><title>Um ambiente simples usando Kubernetes e OpenShift Next Gen - Parte 4</title><link>https://www.lucassabreu.net.br/preview/8/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-4/</link><pubDate>Fri, 10 Mar 2017 00:00:00 +0000</pubDate><guid>https://www.lucassabreu.net.br/preview/8/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-4/</guid><description>Para completar a jornada vamos ver como o Kubernetes lida com dados sensíveis dentro da plataforma</description><content:encoded><![CDATA[<figure class="big">
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-1/header.png"
		
			width="1000" height="165"
		
	/>
	
</figure>

<p>Este post é a quarta parte de uma série sobre o básico necessário para usar o Kubernetes, caso você não tenha lido o post anterior recomendo lê-lo e depois voltar aqui para não ficar perdido.</p>
<ul>
<li>Parte 1 - Conceitos Básicos: <a href="/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-1">clique aqui</a></li>
<li>Parte 2 - Construindo o Ambiente: <a href="/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-2">clique aqui</a></li>
<li>Parte 3 - Volumes Persistentes: <a href="/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-3">clique aqui</a></li>
</ul>
<hr>
<p>Como citei no <a href="/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-3">post anterior</a> ainda existe um ponto de desconforto no ambiente, que é o fato das senhas e usuários estarem expostos diretamente nas configurações. O Kubernetes oferece uma solução para esse problema os <a href="https://kubernetes.io/docs/user-guide/secrets/"><strong>Secrets</strong></a>.</p>
<p>E agora irei mostrar como adicioná-los ao projeto.</p>
<p>Caso não tenha mais os fontes até o estado do post anterior, ou prefira acompanhar o meu andamento, pode pode pegá-los aqui: <a href="https://github.com/lucassabreu/openshift-next-gen/tree/v2">https://github.com/lucassabreu/openshift-next-gen/tree/v2</a>; ou executar:</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">git clone -b v2 <span style="color:#cb4b16">\
</span><span style="color:#cb4b16"></span>    https://github.com/lucassabreu/openshift-next-gen.git
</code></pre></div><hr>
<h4 id="secrets">
	Secrets
	
		<a href="#secrets" class="heading-anchor"
			aria-label="copy link to this section"
			title="Copy link to this section"
			>
			<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 512 512">
				<g>
					<g>
						<g>
							<path d="M480.7,11H130.4c-11.3,0-20.4,9.1-20.4,20.4v60.3H31.5c-11.3,0-20.4,9.1-20.4,20.4v368.5c0,11.3,9.1,20.4,20.4,20.4		 h350.3c11.3,0,20.4-9.1,20.4-20.4v-60.3h78.5c11.3,0,20.4-9.1,20.4-20.4V31.4C501.1,20.1,491.9,11,480.7,11z M361.3,460.2H51.9		 V132.5h309.4V460.2z M460.2,379.5h-58.1V112.1c0-11.3-9.1-20.4-20.4-20.4h-231V51.8h309.4V379.5z"/>
							<path d="m127.8,242.6h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.3 9.1,20.4 20.4,20.4z"/>
							<path d="m127.8,390.9h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.2 9.1,20.4 20.4,20.4z"/>
						</g>
					</g>
				</g>
			</svg>
		</a>
	
</h4>
<p>Existem algumas formas de criar e usar os mesmos, criá-los diretamente de arquivos, ou usando configurações, e expô-los aos contêineres usando volumes ou variáveis de ambiente.</p>
<p>Para essa aplicação vou utilizar um YAML para definir um Secret e vou modificar os Pods para alimentarem as variáveis de ambiente com eles. A estrutura básica do Secret é como segue:</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#268bd2">apiVersion</span>: v1
<span style="color:#268bd2">kind</span>: Secret
<span style="color:#268bd2">metadata</span>:
  <span style="color:#268bd2">name</span>: mysql-secrets
<span style="color:#268bd2">type</span>: Opaque
<span style="color:#268bd2">data</span>:
  <span style="color:#268bd2">mysql-root-password</span>: &lt;hash base64&gt;
  <span style="color:#268bd2">mysql-user</span>: &lt;hash base64&gt;
  <span style="color:#268bd2">mysql-password</span>: &lt;hash base64&gt;
  <span style="color:#268bd2">mysql-database-connection</span>: &lt;hash base64&gt;
</code></pre></div><p>Nele estou criando o Secret <code>mysql-secrets</code> e definindo quatro chaves que representam as três variáveis do MySQL e uma do servidor HTTP. No lugar do <code>&lt;hash base64&gt;</code> deve ir o conteúdo do segredo em Base 64, que pode ser gerado usando o comando <code>echo -n &quot;meusegredo&quot; | base64 -w0</code>.</p>
<p>Eu não gostei muito da ideia de guardar o Base 64 dentro da definição do Secret, então fiz a seguinte modificação no meu <code>mysql-secrets.yml</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#268bd2">apiVersion</span>: v1
<span style="color:#268bd2">kind</span>: Secret
<span style="color:#268bd2">metadata</span>:
  <span style="color:#268bd2">name</span>: mysql-secrets
<span style="color:#268bd2">type</span>: Opaque
<span style="color:#268bd2">data</span>:
  <span style="color:#268bd2">mysql-root-password</span>: %MYSQL_ROOT_PASSWORD
  <span style="color:#268bd2">mysql-user</span>: %MYSQL_USER
  <span style="color:#268bd2">mysql-password</span>: %MYSQL_PASSWORD
  <span style="color:#268bd2">mysql-database-connection</span>: %DATABASE_CONNECTION
</code></pre></div><p>E quando vou aplicar o Secret no Kubernetes uso este script:</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#268bd2">MYSQL_ROOT_PASSWORD</span><span style="color:#719e07">=</span><span style="color:#719e07">$(</span>&lt; /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c<span style="color:#2aa198">${</span><span style="color:#268bd2">1</span><span style="color:#719e07">:-</span><span style="color:#268bd2">32</span><span style="color:#2aa198">}</span><span style="color:#719e07">)</span>
<span style="color:#268bd2">B64_MYSQL_ROOT_PASSWORD</span><span style="color:#719e07">=</span><span style="color:#719e07">$(</span><span style="color:#b58900">echo</span> -n <span style="color:#268bd2">$MYSQL_ROOT_PASSWORD</span> | base64 -w0<span style="color:#719e07">)</span>
<span style="color:#268bd2">B64_DATABASE_USER</span><span style="color:#719e07">=</span><span style="color:#719e07">$(</span><span style="color:#b58900">echo</span> -n <span style="color:#268bd2">$DATABASE_USER</span> | base64 -w0<span style="color:#719e07">)</span>
<span style="color:#268bd2">B64_DATABASE_PASSWORD</span><span style="color:#719e07">=</span><span style="color:#719e07">$(</span><span style="color:#b58900">echo</span> -n <span style="color:#268bd2">$DATABASE_PASSWORD</span> | base64 -w0<span style="color:#719e07">)</span>
<span style="color:#268bd2">B64_DATABASE_CONNECTION</span><span style="color:#719e07">=</span><span style="color:#719e07">$(</span><span style="color:#b58900">echo</span> -n <span style="color:#cb4b16">\
</span><span style="color:#cb4b16"></span>    <span style="color:#2aa198">&#34;mysql://</span><span style="color:#268bd2">$DATABASE_USER</span><span style="color:#2aa198">:</span><span style="color:#268bd2">$DATABASE_PASSWORD</span><span style="color:#2aa198">@db-service:3306/appointments&#34;</span> <span style="color:#cb4b16">\
</span><span style="color:#cb4b16"></span>    | base64 -w0<span style="color:#719e07">)</span>

sed <span style="color:#2aa198">&#34;\
</span><span style="color:#2aa198">  s|%MYSQL_ROOT_PASSWORD|</span><span style="color:#268bd2">$B64_MYSQL_ROOT_PASSWORD</span><span style="color:#2aa198">|;\
</span><span style="color:#2aa198">  s|%MYSQL_USER|</span><span style="color:#268bd2">$B64_DATABASE_USER</span><span style="color:#2aa198">|;\
</span><span style="color:#2aa198">  s|%MYSQL_PASSWORD|</span><span style="color:#268bd2">$B64_DATABASE_PASSWORD</span><span style="color:#2aa198">|;\
</span><span style="color:#2aa198">  s|%DATABASE_CONNECTION|</span><span style="color:#268bd2">$B64_DATABASE_CONNECTION</span><span style="color:#2aa198">|&#34;</span> <span style="color:#cb4b16">\
</span><span style="color:#cb4b16"></span>  mysql-secrets.yml | oc apply -f -
</code></pre></div><p>Esse script cria uma senha aleatória para o root e usa duas variáveis de ambiente para definir o usuário e senha do MySQL, faz o Base 64 deles, injeta eles no arquivo via <code>sed</code> no Secret e aplica no Kubernetes com <code>oc apply -f -</code> que irá ler a saída do <code>sed</code> e aplicá-la. Na hora de executar fica assim:</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ <span style="color:#b58900">export</span> <span style="color:#268bd2">DATABASE_USER</span><span style="color:#719e07">=</span>appoint
$ <span style="color:#b58900">export</span> <span style="color:#268bd2">DATABASE_PASSWORD</span><span style="color:#719e07">=</span><span style="color:#2aa198">123</span>
$ ./env-set-oc.sh
secret <span style="color:#2aa198">&#34;mysql-secrets&#34;</span> configured
</code></pre></div><p>Altero os Deployments para considerarem o Secret que criei:</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#268bd2">apiVersion</span>: extensions/v1beta1
<span style="color:#268bd2">kind</span>: Deployment
<span style="color:#268bd2">metadata</span>:
  <span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;db-deployment&#34;</span>
<span style="color:#268bd2">spec</span>:
  <span style="color:#268bd2">replicas</span>: <span style="color:#2aa198">1</span>
  <span style="color:#268bd2">template</span>:
    <span style="color:#268bd2">metadata</span>:
      <span style="color:#268bd2">labels</span>:
        <span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;db-pod&#34;</span>
    <span style="color:#268bd2">spec</span>:
      <span style="color:#268bd2">containers</span>:
        - <span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;db&#34;</span>
          <span style="color:#268bd2">image</span>: <span style="color:#2aa198">&#34;lucassabreu/openshift-mysql-test&#34;</span>
          <span style="color:#268bd2">ports</span>:
            - <span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;mysql-port&#34;</span>
              <span style="color:#268bd2">containerPort</span>: <span style="color:#2aa198">3306</span>
          <span style="color:#268bd2">env</span>:
            - <span style="color:#268bd2">name</span>: MYSQL_DATABASE
              <span style="color:#268bd2">value</span>: appointments
            - <span style="color:#268bd2">name</span>: MYSQL_ROOT_PASSWORD
              <span style="color:#268bd2">valueFrom</span>:
                <span style="color:#268bd2">secretKeyRef</span>:
                  <span style="color:#268bd2">name</span>: mysql-secrets
                  <span style="color:#268bd2">key</span>: mysql-root-password
            - <span style="color:#268bd2">name</span>: MYSQL_USER
              <span style="color:#268bd2">valueFrom</span>:
                <span style="color:#268bd2">secretKeyRef</span>:
                  <span style="color:#268bd2">name</span>: mysql-secrets
                  <span style="color:#268bd2">key</span>: mysql-user
            - <span style="color:#268bd2">name</span>: MYSQL_PASSWORD
              <span style="color:#268bd2">valueFrom</span>:
                <span style="color:#268bd2">secretKeyRef</span>:
                  <span style="color:#268bd2">name</span>: mysql-secrets
                  <span style="color:#268bd2">key</span>: mysql-password
          <span style="color:#268bd2">volumeMounts</span>:
            - <span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;mysql-persistent-volume&#34;</span>
              <span style="color:#268bd2">mountPath</span>: <span style="color:#2aa198">&#34;/var/lib/mysql&#34;</span>
      <span style="color:#268bd2">volumes</span>:
        - <span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;mysql-persistent-volume&#34;</span>
          <span style="color:#268bd2">persistentVolumeClaim</span>:
            <span style="color:#268bd2">claimName</span>: mysql-pv-claim
</code></pre></div><p><small><center>db-deployment.yml</center></small></p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#268bd2">apiVersion</span>: extensions/v1beta1
<span style="color:#268bd2">kind</span>: Deployment
<span style="color:#268bd2">metadata</span>:
  <span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;node-deployment&#34;</span>
<span style="color:#268bd2">spec</span>:
  <span style="color:#268bd2">replicas</span>: <span style="color:#2aa198">1</span>
  <span style="color:#268bd2">template</span>:
    <span style="color:#268bd2">metadata</span>:
      <span style="color:#268bd2">labels</span>:
        <span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;node-pod&#34;</span>
    <span style="color:#268bd2">spec</span>:
      <span style="color:#268bd2">containers</span>:
        - <span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;node&#34;</span>
          <span style="color:#268bd2">image</span>: <span style="color:#2aa198">&#34;lucassabreu/openshift-app-test&#34;</span>
          <span style="color:#268bd2">ports</span>:
            - <span style="color:#268bd2">name</span>: node-port
              <span style="color:#268bd2">containerPort</span>: <span style="color:#2aa198">8080</span>
              <span style="color:#268bd2">protocol</span>: TCP
          <span style="color:#268bd2">env</span>:
            - <span style="color:#268bd2">name</span>: DATABASE_CONNECTION
              <span style="color:#268bd2">valueFrom</span>:
                <span style="color:#268bd2">secretKeyRef</span>:
                  <span style="color:#268bd2">name</span>: mysql-secrets
                  <span style="color:#268bd2">key</span>: mysql-database-connection
</code></pre></div><p><small><center>node-deployment.yml</center></small></p>
<p>A alteração consiste de trocar a chave <code>value</code> das variáveis por <code>valueFrom</code> e apontar para as chaves corretas dentro do Secret.</p>
<p>Depois que aplica as mudanças os Deployments vão identificá-las e trocar os Pods por novos. E passaram a utilizar os Secrets informado nas variáveis para eles.</p>
<hr>
<p>Ao final dessa séria, a conclusão que posso chegar é que o Kubernetes exige um conjunto razoavelmente grande de configurações para podermos servir uma aplicação, mas são arquivos simples de se entender e muito bem <a href="https://kubernetes.io/docs/reference/">documentados</a> o que facilitou bastante o processo, e não me fez sentir o peso dessa quantidade.</p>]]></content:encoded></item><item><title>Um ambiente simples usando Kubernetes e OpenShift Next Gen - Parte 3</title><link>https://www.lucassabreu.net.br/preview/8/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-3/</link><pubDate>Thu, 09 Mar 2017 00:00:00 +0000</pubDate><guid>https://www.lucassabreu.net.br/preview/8/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-3/</guid><description>Agora que sabemos os conceitos por traz do Kubernetes e vimos um exemplo básico de utilização, vamos ver como lidamos com contêiners que precisam de persistência.</description><content:encoded><![CDATA[<figure class="big">
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-1/header.png"
		
			width="1000" height="165"
		
	/>
	
</figure>

<p>Este post é a terceira parte de uma série sobre o básico necessário para
usar o Kubernetes, caso você não tenha lido o post anterior recomendo
lê-lo e depois voltar aqui para não ficar perdido.</p>
<ul>
<li>Parte 1 - Conceitos Básicos: <a href="/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-1">clique aqui</a></li>
<li>Parte 2 - Construindo o Ambiente: <a href="/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-2">clique aqui</a></li>
<li>Parte 4 - Segredos: <a href="/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-4">clique aqui</a></li>
</ul>
<hr>
<p>Como comentei no <a href="/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-2">post anterior</a> existem alguns problemas no ambiente que construí, e o princípial deles é que os Pods não totalmente efêmeros, ou seja, se eu adicionar novos dados nele, no momento que o Pod fosse destruído os dados iriam junto e sem backup !</p>
<p>E agora iremos tratar esse primeiro problema. Caso não tenha mais os fontes até o estado do post anterior, ou prefira acompanhar o meu andamento, pode pode pegá-los aqui: <a href="https://github.com/lucassabreu/openshift-next-gen/tree/v1">https://github.com/lucassabreu/openshift-next-gen/tree/v1</a>; ou executar:</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">git clone -b v1 <span style="color:#cb4b16">\
</span><span style="color:#cb4b16"></span>    https://github.com/lucassabreu/openshift-next-gen.git
</code></pre></div><hr>
<h4 id="a297">
	Volumes Persistentes
	
		<a href="#a297" class="heading-anchor"
			aria-label="copy link to this section"
			title="Copy link to this section"
			>
			<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 512 512">
				<g>
					<g>
						<g>
							<path d="M480.7,11H130.4c-11.3,0-20.4,9.1-20.4,20.4v60.3H31.5c-11.3,0-20.4,9.1-20.4,20.4v368.5c0,11.3,9.1,20.4,20.4,20.4		 h350.3c11.3,0,20.4-9.1,20.4-20.4v-60.3h78.5c11.3,0,20.4-9.1,20.4-20.4V31.4C501.1,20.1,491.9,11,480.7,11z M361.3,460.2H51.9		 V132.5h309.4V460.2z M460.2,379.5h-58.1V112.1c0-11.3-9.1-20.4-20.4-20.4h-231V51.8h309.4V379.5z"/>
							<path d="m127.8,242.6h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.3 9.1,20.4 20.4,20.4z"/>
							<path d="m127.8,390.9h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.2 9.1,20.4 20.4,20.4z"/>
						</g>
					</g>
				</g>
			</svg>
		</a>
	
</h4>
<p>Podemos testar esse problema conectando no Pod e adicionando alguns dados e então destruindo ele para ver o efeito. Vou adicionar um registro sobre para Homens no Sábado, pois é um dia sem nenhuma informação e facilita a visualização.</p>


	

<figure >
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-3/male-chart-before.png"
		
			width="494" height="350"
		
	/>
	
		<figcaption><p>Antes... sem dados</p></figcaption>
	
</figure>

<p>Para acessar o Pod usa-se o comando <code>oc rsh &lt;pod-name&gt;</code>, e para encontrar o nome do Pod posso usar o comando <code>oc get pods -l &lt;selector&gt;</code>, então é só acessar o MySQL e inserir os dados:</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ oc get pods -l <span style="color:#268bd2">name</span><span style="color:#719e07">=</span>db-pod
NAME                             READY     STATUS    RESTARTS   AGE
db-deployment-3618823556-zrje2   1/1       Running   <span style="color:#2aa198">0</span>          14m
$ oc rsh db-deployment-3618823556-zrje2 bash
&lt;dentro contêiner&gt;:/$ mysql -u<span style="color:#268bd2">$MYSQL_USER</span> -p<span style="color:#268bd2">$MYSQL_PASSWORD</span> appointments
mysql&gt; insert into appointments values<span style="color:#719e07">(</span>21, <span style="color:#2aa198">&#39;M&#39;</span>, <span style="color:#2aa198">&#39;2017-03-05&#39;</span>, <span style="color:#2aa198">&#39;Sunday&#39;</span>, 1, null<span style="color:#719e07">)</span>;
Query OK, <span style="color:#2aa198">1</span> row affected <span style="color:#719e07">(</span>0.00 sec<span style="color:#719e07">)</span>
</code></pre></div><p>Entrando novamente na aplicação e indo em &ldquo;Sunday&rdquo;, tenho um gráfico com dados para os Homens.</p>


	

<figure >
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-3/male-chart-changed.png"
		
			width="435" height="348"
		
	/>
	
		<figcaption><p>isso se o seu contêiner não morrer no caminho</p></figcaption>
	
</figure>

<p>Para concluir o teste, basta apagar o Pod com <code>oc delete pods -l name=db-pod</code> ou <code>oc delete pod db-deployment-xyz</code>, esperar o Pod ser recriado e então ver que as alterações nos dados se foram:</p>


	

<figure >
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-3/male-chart-before.png"
		
			width="494" height="350"
		
	/>
	
		<figcaption><p>:&#39;(</p></figcaption>
	
</figure>

<p>Para resolver esse problema o Kubernetes possui os <a href="https://kubernetes.io/docs/user-guide/persistent-volumes/"><strong>Persistent Volume Claims (PVC)</strong></a> que permitem definir volumes que existem fora do ciclo de vida de um Pod, ou seja, mesmo que todos os Pods sejam destruídos, o PVC irá manter os dados em si.</p>
<p>Podemos utilizar vários tipos de volumes em um PVC para armazenar os dados, no caso do OpenShift o padrão é <a href="https://kubernetes.io/docs/user-guide/persistent-volumes/#aws">EBS</a>, que são volumes armazenados dentro do <a href="https://aws.amazon.com/">AWS da Amazon</a>, mas existe a opção de usar volumes do Google Cloud, do Azure, Locais, etc; no Kubernetes.</p>
<p>Mas no momento o OpenShift esta ofertando apenas o EBS. Abaixo esta a definição do PVC:</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#268bd2">apiVersion</span>: v1
<span style="color:#268bd2">kind</span>: PersistentVolumeClaim
<span style="color:#268bd2">metadata</span>:
  <span style="color:#268bd2">name</span>: mysql-pv-claim
<span style="color:#268bd2">spec</span>:
  <span style="color:#268bd2">accessModes</span>:
    - ReadWriteOnce
  <span style="color:#268bd2">resources</span>:
    <span style="color:#268bd2">requests</span>:
      <span style="color:#268bd2">storage</span>: 1Gi
</code></pre></div><p>Depois de um momento o OpenShift irá criar um volume e disponibilizá-lo, agora é preciso vincular ele com os <code>db-pods</code>, para isso basta alterar os volumes no <code>db-deployment</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#268bd2">apiVersion</span>: extensions/v1beta1
<span style="color:#268bd2">kind</span>: Deployment
<span style="color:#268bd2">metadata</span>:
  <span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;db-deployment&#34;</span>
<span style="color:#268bd2">spec</span>:
  <span style="color:#268bd2">replicas</span>: <span style="color:#2aa198">1</span>
  <span style="color:#268bd2">template</span>:
    <span style="color:#268bd2">metadata</span>:
      <span style="color:#268bd2">labels</span>:
        <span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;db-pod&#34;</span>
    <span style="color:#268bd2">spec</span>:
      <span style="color:#268bd2">containers</span>:
        - <span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;db&#34;</span>
          <span style="color:#268bd2">image</span>: <span style="color:#2aa198">&#34;lucassabreu/openshift-mysql-test&#34;</span>
          <span style="color:#268bd2">ports</span>:
            - <span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;mysql-port&#34;</span>
              <span style="color:#268bd2">containerPort</span>: <span style="color:#2aa198">3306</span>
          <span style="color:#268bd2">env</span>:
            - <span style="color:#268bd2">name</span>: MYSQL_DATABASE
              <span style="color:#268bd2">value</span>: appointments
            - <span style="color:#268bd2">name</span>: MYSQL_ROOT_PASSWORD
              <span style="color:#268bd2">value</span>: <span style="color:#2aa198">&#34;root&#34;</span>
            - <span style="color:#268bd2">name</span>: MYSQL_USER
              <span style="color:#268bd2">value</span>: <span style="color:#2aa198">&#34;appoint&#34;</span>
            - <span style="color:#268bd2">name</span>: MYSQL_PASSWORD
              <span style="color:#268bd2">value</span>: <span style="color:#2aa198">&#34;123&#34;</span>
          <span style="color:#268bd2">volumeMounts</span>:
            - <span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;mysql-persistent-volume&#34;</span> <span style="color:#586e75"># mudou aqui</span>
              <span style="color:#268bd2">mountPath</span>: <span style="color:#2aa198">&#34;/var/lib/mysql&#34;</span>
      <span style="color:#268bd2">volumes</span>:
        - <span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;mysql-persistent-volume&#34;</span> <span style="color:#586e75"># e aqui</span>
          <span style="color:#268bd2">persistentVolumeClaim</span>:
            <span style="color:#268bd2">claimName</span>: mysql-pv-claim
</code></pre></div><p>Duas coisas foram alteradas no <code>db-deployment</code>:</p>
<ul>
<li>O nome do volume mudou, isso é necessário porque estamos fazendo uma mudança de tipo de volume, e o Deployment não consegue alterar o tipo, mas se temos um novo, então tudo bem.</li>
<li>Adicionei a tag <code>persistentVolumeClaim</code> no volume novo e apontei para o PVC que criei agora a pouco.</li>
</ul>
<p>Executo o comando <code>oc apply -f db-deployment.yml</code> e o Deployment irá destruir os Pods antigos e criar novos usando o PVC.</p>
<p>Agora se replicarmos os comandos de para incluir registros e destruir o Pod do MySQL, quando o Deployment recriar o Pod ele manterá os dados.</p>
<hr>
<p>Outro ponto que esta desconfortável no meu ambiente é o fato das senhas e usuários estarem expostas diretamente nas configurações. O Kubernetes oferece uma solução para esse problema, que irei abordar no próximo post.</p>
<p>Próximo Post: <a href="/post/um-ambiente-usando-kubernetes-e-openshift-parte-4/">clique aqui</a></p>]]></content:encoded></item><item><title>Um ambiente simples usando Kubernetes e OpenShift Next Gen - Parte 2</title><link>https://www.lucassabreu.net.br/preview/8/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-2/</link><pubDate>Wed, 08 Mar 2017 00:00:00 +0000</pubDate><guid>https://www.lucassabreu.net.br/preview/8/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-2/</guid><description>Uma vez que entendemos os conceitos básicos do Kubernetes na postagem anterior, vamos para uma demonstração de como utilizá-lo para montar uma aplicação simples</description><content:encoded><![CDATA[<figure class="big">
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-1/header.png"
		
			width="1000" height="165"
		
	/>
	
</figure>

<p>Este post é parte de uma série sobre o básico necessário para usar o Kubernetes, caso você não tenha lido os post anteriores recomendo lê-los e depois voltar aqui para não ficar perdido.</p>
<ul>
<li>Parte 1 - Conceitos Básicos: <a href="/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-1">clique aqui</a></li>
<li>Parte 3 - Volumes Persistentes: <a href="/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-3">clique aqui</a></li>
<li>Parte 4 - Segredos: <a href="/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-4">clique aqui</a></li>
</ul>
<hr>
<p>Conhecendo os componentes básicos explicados no <a href="/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-1">post anterior</a> posso preparar a aplicação que mostrei para o Kubernetes.</p>
<p>O primeiro passo é definir quais são os Pods do meu cluster.</p>
<p>Embora o primeiro impulso seja colocar cada um dos contêineres em um Pod distinto e seguir em frente, esse não é necessariamente a melhor forma de defini-los. Por exemplo, em situação certos contêineres tem o mesmo objetivo, ou dependem muito um do outro é uma boa ideia mantê-los juntos.</p>
<p>Mas para a minha aplicação faz mais sentido um Pod por contêiner, um para o servidor HTTP e outro para o banco de dados.</p>
<p>Como não é uma boa ideia simplesmente definir um Pod diretamente, criei dois Deployments o <code>node-deployment</code> e o <code>db-deployment</code>.</p>
<p><em>No momento da escrita desse post os Deployments ainda estavam marcados como uma versão beta, mas já são bastante usados, então é confiável.</em></p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#268bd2">apiVersion</span>: extensions/v1beta1
<span style="color:#268bd2">kind</span>: Deployment
<span style="color:#268bd2">metadata</span>:
  <span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;db-deployment&#34;</span>
<span style="color:#268bd2">spec</span>:
  <span style="color:#268bd2">replicas</span>: <span style="color:#2aa198">1</span>
  <span style="color:#268bd2">template</span>:
    <span style="color:#268bd2">metadata</span>:
      <span style="color:#268bd2">labels</span>:
        <span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;db-pod&#34;</span>
    <span style="color:#268bd2">spec</span>:
      <span style="color:#268bd2">containers</span>:
        - <span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;db&#34;</span>
          <span style="color:#268bd2">image</span>: <span style="color:#2aa198">&#34;lucassabreu/openshift-mysql-test&#34;</span>
          <span style="color:#268bd2">ports</span>:
            - <span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;mysql-port&#34;</span>
              <span style="color:#268bd2">containerPort</span>: <span style="color:#2aa198">3306</span>
          <span style="color:#268bd2">env</span>:
            - <span style="color:#268bd2">name</span>: MYSQL_DATABASE
              <span style="color:#268bd2">value</span>: appointments
            - <span style="color:#268bd2">name</span>: MYSQL_ROOT_PASSWORD
              <span style="color:#268bd2">value</span>: <span style="color:#2aa198">&#34;root&#34;</span>
            - <span style="color:#268bd2">name</span>: MYSQL_USER
              <span style="color:#268bd2">value</span>: <span style="color:#2aa198">&#34;appoint&#34;</span>
            - <span style="color:#268bd2">name</span>: MYSQL_PASSWORD
              <span style="color:#268bd2">value</span>: <span style="color:#2aa198">&#34;123&#34;</span>
          <span style="color:#268bd2">volumeMounts</span>:
            - <span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;mysql-volume&#34;</span>
              <span style="color:#268bd2">mountPath</span>: <span style="color:#2aa198">&#34;/var/lib/mysql&#34;</span>
      <span style="color:#268bd2">volumes</span>:
        - <span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;mysql-volume&#34;</span>
</code></pre></div><p>O primeiro Deployment é para o <code>db-deployment</code>. Os arquivos de configuração são simples de ler, sempre começamos o arquivo dizendo o tipo de objeto que será criado, o <code>metadata</code> e definimos as <code>specs</code> (que variam para cada tipo de componente).</p>
<p>Defini que preciso de apenas um Pod (<code>replica</code>) e que as mesmas serão identificáveis pelas labels: <code>name=db-pod</code>.</p>
<p>Outras duas informações importantes são <code>ports</code> e <code>volumeMounts</code>.</p>
<ul>
<li><code>ports</code> define quais portas deverão ser expostas no Pod e permite que possam ser mapeadas nos Services posteriormente. Também é recomendado dar nomes às mesmas (<code>mysql-port</code>), assim podemos usar o nome como identificador no lugar de números.</li>
<li><code>volumeMounts</code> define todos os volumes do contêiner, dessa forma o volume de dados do MySQL precisou ser mapeado (<code>/var/lib/mysql</code>).</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#268bd2">apiVersion</span>: extensions/v1beta1
<span style="color:#268bd2">kind</span>: Deployment
<span style="color:#268bd2">metadata</span>:
  <span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;node-deployment&#34;</span>
<span style="color:#268bd2">spec</span>:
  <span style="color:#268bd2">replicas</span>: <span style="color:#2aa198">1</span>
  <span style="color:#268bd2">template</span>:
    <span style="color:#268bd2">metadata</span>:
      <span style="color:#268bd2">labels</span>:
        <span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;node-pod&#34;</span>
    <span style="color:#268bd2">spec</span>:
      <span style="color:#268bd2">containers</span>:
        - <span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;node&#34;</span>
          <span style="color:#268bd2">image</span>: <span style="color:#2aa198">&#34;lucassabreu/openshift-app-test&#34;</span>
          <span style="color:#268bd2">ports</span>:
            - <span style="color:#268bd2">name</span>: node-port
              <span style="color:#268bd2">containerPort</span>: <span style="color:#2aa198">8080</span>
              <span style="color:#268bd2">protocol</span>: TCP
          <span style="color:#268bd2">env</span>:
            - <span style="color:#268bd2">name</span>: DATABASE_CONNECTION
              <span style="color:#268bd2">value</span>: mysql://appoint:123@db-service:3306/appointments
</code></pre></div><p>O segundo Deployment é do servidor HTTP, chamei-o de <code>node-deployment</code>. Ele segue as mesmas regras do anterior, sendo até mais simples.</p>
<p>A novidade aqui é o <code>db-service</code>, que vou explicar agora:</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#268bd2">apiVersion</span>: <span style="color:#2aa198">&#34;v1&#34;</span>
<span style="color:#268bd2">kind</span>: Service
<span style="color:#268bd2">metadata</span>:
  <span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;db-service&#34;</span>
<span style="color:#268bd2">spec</span>:
  <span style="color:#268bd2">ports</span>:
    - <span style="color:#268bd2">port</span>: <span style="color:#2aa198">3306</span>
      <span style="color:#268bd2">targetPort</span>: <span style="color:#2aa198">&#34;mysql-port&#34;</span>
      <span style="color:#268bd2">protocol</span>: TCP
  <span style="color:#268bd2">selector</span>:
    <span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;db-pod&#34;</span>
</code></pre></div><p>O <code>db-service</code> é o nome do Service que defini para agrupar os Pods de banco de dados, o Service ficou bem simples e basicamente tem duas partes:</p>
<ul>
<li><code>selector</code> define uma regra para selecionar quais Pods fazem parte do Service, no caso estou usando uma regra bem simples de <code>name=db-pod</code>.</li>
<li><code>ports</code> permite que você mapeie as portas dos Pods para uma porta no Service, no caso estou roteando a porta de nome <code>mysql-port</code> para a <code>3306</code> do Service. Assim toda chamada para <code>db-service:3306</code> será direcionada para a <code>mysql-port</code> de um dos Pods.</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#268bd2">apiVersion</span>: <span style="color:#2aa198">&#34;v1&#34;</span>
<span style="color:#268bd2">kind</span>: Service
<span style="color:#268bd2">metadata</span>:
  <span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;node-service&#34;</span>
<span style="color:#268bd2">spec</span>:
  <span style="color:#268bd2">ports</span>:
    - <span style="color:#268bd2">port</span>: <span style="color:#2aa198">80</span>
      <span style="color:#268bd2">targetPort</span>: <span style="color:#2aa198">&#34;node-port&#34;</span>
      <span style="color:#268bd2">protocol</span>: TCP
  <span style="color:#268bd2">selector</span>:
    <span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;node-pod&#34;</span>
</code></pre></div><p>O <code>node-service</code> segue a mesma lógica, mas para os Pods do servidor HTTP.</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#268bd2">apiVersion</span>: v1
<span style="color:#268bd2">kind</span>: Route
<span style="color:#268bd2">metadata</span>:
  <span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;node-route&#34;</span>
<span style="color:#268bd2">spec</span>:
  <span style="color:#268bd2">to</span>:
    <span style="color:#268bd2">kind</span>: Service
    <span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;node-service&#34;</span>
</code></pre></div><p>Por fim criei uma Route para expor o serviço <code>node-service</code> para a Internet. Eu poderia definir qual o nome de host, mas como não o fiz o OpenShift irá gerar uma URL automaticamente para mim.</p>
<p>Essa URL pode ser descoberta entrando na Dashboard do OpenShift ou com o comando <code>oc get routes</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">$ oc get routes
NAME         HOST/PORT                                                  PATH      SERVICES       PORT      TERMINATION
node-route   node-route-medium-example.44fs.preview.openshiftapps.com             node-service   &lt;all&gt;
</code></pre></div><p>Para aplicar as configurações no cluster a OpenShift disponibiliza um cliente de linha de comando, que usa basicamente a mesma estrutura do <code>kubectl</code>, o <code>oc</code>. Então tudo que precisa ser feito é executar:</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">oc apply -f db-deployment.yml,node-deployment.yml,db-srv.yml,node-srv.yml,node-route.yml
<span style="color:#586e75"># Ou</span>
oc apply -f db-deployment.yml
oc apply -f node-deployment.yml
oc apply -f db-srv.yml
oc apply -f node-srv.yml
oc apply -f node-route.yml
</code></pre></div><hr>
<p>As instruções de como instalar o cliente e configurá-lo estão nesse
link: <a href="https://console.preview.openshift.com/console/command-line">https://console.preview.openshift.com/console/command-line</a>.</p>
<hr>
<h4 id="-update-20170429-">
	*** Update 2017–04–29 ***
	
		<a href="#-update-20170429-" class="heading-anchor"
			aria-label="copy link to this section"
			title="Copy link to this section"
			>
			<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 512 512">
				<g>
					<g>
						<g>
							<path d="M480.7,11H130.4c-11.3,0-20.4,9.1-20.4,20.4v60.3H31.5c-11.3,0-20.4,9.1-20.4,20.4v368.5c0,11.3,9.1,20.4,20.4,20.4		 h350.3c11.3,0,20.4-9.1,20.4-20.4v-60.3h78.5c11.3,0,20.4-9.1,20.4-20.4V31.4C501.1,20.1,491.9,11,480.7,11z M361.3,460.2H51.9		 V132.5h309.4V460.2z M460.2,379.5h-58.1V112.1c0-11.3-9.1-20.4-20.4-20.4h-231V51.8h309.4V379.5z"/>
							<path d="m127.8,242.6h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.3 9.1,20.4 20.4,20.4z"/>
							<path d="m127.8,390.9h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.2 9.1,20.4 20.4,20.4z"/>
						</g>
					</g>
				</g>
			</svg>
		</a>
	
</h4>
<p>Se estiver lendo esse artigo algum tempo depois de lançado, a OpenShift fechou o preview e o link anterior não funciona, mas ainda é possível baixar o <code>oc</code> client em:</p>
<p><a href="https://github.com/openshift/origin/releases" title="https://github.com/openshift/origin/releases"><strong>openshift/origin</strong> origin - Enterprise Kubernetes for Developers</a></p>
<hr>
<p>Caso não queira criar os todos esses fontes, pode pegá-los aqui: <a href="https://github.com/lucassabreu/openshift-next-gen/tree/v1">https://github.com/lucassabreu/openshift-next-gen/tree/v1</a>; ou executar:</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell">git clone -b v1 <span style="color:#cb4b16">\
</span><span style="color:#cb4b16"></span>    https://github.com/lucassabreu/openshift-next-gen.git
</code></pre></div><hr>
<p>Agora no console do OpenShift deverão aparecer todos esses componentes
rodando.</p>


	

<figure class="big">
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-2/openshift-dashboard.png"
		
			width="800" height="496"
		
	/>
	
		<figcaption><p>eu fiz algumas brincadeiras antes de chegar aqui, então tenho mais versões dos deploys ☺</p></figcaption>
	
</figure>

<p>Caso esteja acompanhando as etapas, você já deve ter visto esse Dashboard, mas caso esteja apenas lendo: esse Dashboard é a tela principal dos clusters que você criar no OpenShift; basta clicar aqui, autenticar-se com o GitHub, criar um <strong>Project</strong>, e pronto em <strong>Overview</strong> você verá os componentes surgirem e sumirem em tempo real conforme vai aplicando as configurações.</p>
<p>Voltando, nesse momento temos o mesmo comportamento da aplicação local, rodando dentro do Kubernetes, empenhando o mínimo possível de configuração.</p>
<p>Mas existem alguns problemas no que foi definido.</p>
<p>O primeiro é que os <code>db-pods</code> estão totalmente efêmeros, ou seja, se eu adicionar novos dados nele, no momento que o Pod fosse destruído os dados iriam junto e sem backup !</p>
<p>Irei mostrar como resolver esse problema no próximo post.</p>
<p>Próximo Post: <a href="/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-3/">clique aqui</a></p>]]></content:encoded></item><item><title>Um ambiente simples usando Kubernetes e OpenShift Next Gen - Parte 1</title><link>https://www.lucassabreu.net.br/preview/8/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-1/</link><pubDate>Tue, 07 Mar 2017 00:00:00 +0000</pubDate><guid>https://www.lucassabreu.net.br/preview/8/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-1/</guid><description>Como parte das minhas metas dentro da Coderockr está a construção de um cluster usando algumas das ferramentas de orquestração de contêineres que existem no mercado; como o Docker Swarm, Kubernetes, Apache Mesos, etc. Optei pelo Kubernetes...</description><content:encoded><![CDATA[<figure class="big">
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-1/header.png"
		
			width="1000" height="165"
		
	/>
	
</figure>

<p>Como parte das minhas metas dentro da <a href="http://blog.coderockr.com">Coderockr</a> está a construção de um cluster usando algumas das ferramentas de orquestração de contêineres que existem no mercado; como o <a href="https://docs.docker.com/engine/swarm/">Docker Swarm</a>, <a href="http://kubernetes.io">Kubernetes</a>, <a href="http://mesos.apache.org/">Apache Mesos</a>, etc.</p>
<p>Optei pelo <strong>Kubernetes</strong> no momento, tanto pelo pedigree, criado pelo Google e mantido pela Cloud Native Computing Foundation; quanto pela oferta de grandes clouds como a Red Hat, Azure e Google.</p>
<p>Quando estava avaliando as opções disponíveis, o <a href="https://medium.com/@JeanCarloMachad">Jean Carlo Machado</a> (colega da <a href="https://medium.com/@compufacil">CompuFácil</a>), me sugeriu usar o <a href="https://blog.openshift.com/next-generation-openshift-online/"><strong>OpenShift Next Gen</strong></a>, a plataforma da Red Hat para Kubernetes, que esta em <a href="https://www.openshift.com/devpreview/">Developer Preview</a> permitindo que você se cadastre para testar a ferramenta deles por 30 dias.</p>
<p>Isso me salvou de já ter de sair pagando para testar, ou ter de fazer o <a href="https://kubernetes.io/docs/getting-started-guides/minikube/">setup do minikube</a> na minha máquina, o que não me era muito atrativo.</p>
<p>Assim resolvi dar uma chance a plataforma da Red Hat, e construir um ambiente simples com um servidor HTTP em Node e um banco de dados MySQL, o que já me permite cobrir vários aspectos básicos do Kubernetes.</p>
<p>Mas como o texto foi ficando muito grande, achei melhor quebrá-lo em 4 partes para não cansar quem for ler e que irei publicar nos próximos dias.</p>
<p>Nessa primeira parte vou dar uma introdução aos conceitos básicos do Kubernetes, e nas próximas irei fazer uso desses conceitos.</p>
<ul>
<li>Parte 2 - Construindo o Ambiente: <a href="/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-2/">clique aqui</a></li>
<li>Parte 3 - Volumes Persistentes: <a href="/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-3/">clique aqui</a></li>
<li>Parte 4 - Segredos: <a href="/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-4/">clique aqui</a></li>
</ul>
<hr>
<p>A aplicação que construí usa um <a href="https://www.kaggle.com/joniarroba/noshowappointments">conjunto de dados sobre faltas em consultas</a> que achei no <a href="https://www.kaggle.com/">Kaggle</a> e gera os gráficos abaixo, podendo escolher o dia da semana como filtro.</p>


	

<figure >
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-1/app-view.png"
		
			width="800" height="541"
		
	/>
	
		<figcaption><p>O fonte dessa aplicação pode ser encontrado aqui: &lt;https://github.com/lucassabreu/openshift-next-gen/tree/app&gt;</p></figcaption>
	
</figure>

<p>Então publiquei no <a href="http://hub.docker.com">Docker Hub</a> uma imagem para a aplicação (<a href="https://hub.docker.com/r/lucassabreu/openshift-app-test/">lucassabreu/openshift-app-test</a>) e outra para o banco de dados (<a href="https://hub.docker.com/r/lucassabreu/openshift-mysql-test/">lucassabreu/openshift-mysql-test</a>) - essa imagem é um MySQL normal, mas que adicionei um dump da base que vou usar para facilitar o deploy.</p>
<p>Agora se eu quiser executar essa aplicação na minha máquina, posso simplesmente executar os seguintes comando do Docker e terei o servidor me respondendo em <code>http://localhost</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#719e07">#!/bin/bash
</span><span style="color:#719e07"></span>docker run -d --name db-test <span style="color:#cb4b16">\
</span><span style="color:#cb4b16"></span>  -e <span style="color:#268bd2">MYSQL_ROOT_PASSWORD</span><span style="color:#719e07">=</span>root -e <span style="color:#268bd2">MYSQL_DATABASE</span><span style="color:#719e07">=</span>appointments <span style="color:#cb4b16">\
</span><span style="color:#cb4b16"></span>  -e <span style="color:#268bd2">MYSQL_USER</span><span style="color:#719e07">=</span>appoint -e <span style="color:#268bd2">MYSQL_PASSWORD</span><span style="color:#719e07">=</span><span style="color:#2aa198">123</span> <span style="color:#cb4b16">\
</span><span style="color:#cb4b16"></span>  lucassabreu/openshift-mysql-test

docker run -d --name app-test --link db-test:db <span style="color:#cb4b16">\
</span><span style="color:#cb4b16"></span>  -e <span style="color:#268bd2">DATABASE_CONNECTION</span><span style="color:#719e07">=</span>mysql://appoint:123@<span style="color:#268bd2">$db</span>:3306/appointments <span style="color:#cb4b16">\
</span><span style="color:#cb4b16"></span>  -p 80:8080 lucassabreu/openshift-app-test
</code></pre></div><p>Certo, agora que tenho certeza de que a minha aplicação está operacional, comecei a criar os objetos do Kubernetes, mas antes é importante entender alguns conceitos da plataforma para não ficar muito perdido:</p>
<h4 id="podhttpskubernetesiodocsuser-guidepods">
	<a href="https://kubernetes.io/docs/user-guide/pods/">Pod</a>
	
		<a href="#podhttpskubernetesiodocsuser-guidepods" class="heading-anchor"
			aria-label="copy link to this section"
			title="Copy link to this section"
			>
			<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 512 512">
				<g>
					<g>
						<g>
							<path d="M480.7,11H130.4c-11.3,0-20.4,9.1-20.4,20.4v60.3H31.5c-11.3,0-20.4,9.1-20.4,20.4v368.5c0,11.3,9.1,20.4,20.4,20.4		 h350.3c11.3,0,20.4-9.1,20.4-20.4v-60.3h78.5c11.3,0,20.4-9.1,20.4-20.4V31.4C501.1,20.1,491.9,11,480.7,11z M361.3,460.2H51.9		 V132.5h309.4V460.2z M460.2,379.5h-58.1V112.1c0-11.3-9.1-20.4-20.4-20.4h-231V51.8h309.4V379.5z"/>
							<path d="m127.8,242.6h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.3 9.1,20.4 20.4,20.4z"/>
							<path d="m127.8,390.9h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.2 9.1,20.4 20.4,20.4z"/>
						</g>
					</g>
				</g>
			</svg>
		</a>
	
</h4>
<p>Este é o menor componente do Kubernetes, representa um nó no cluster, executando um ou mais contêineres que entregam uma mesma função.</p>
<p>Eles tem a característica de serem descartáveis, ou seja, se eventualmente acontecer algum problema a um Pod, este pode ser destruído sem nenhum efeito colateral ou remorso.</p>
<h4 id="deploymenthttpskubernetesiodocsuser-guidedeployments">
	<a href="https://kubernetes.io/docs/user-guide/deployments/">Deployment</a>
	
		<a href="#deploymenthttpskubernetesiodocsuser-guidedeployments" class="heading-anchor"
			aria-label="copy link to this section"
			title="Copy link to this section"
			>
			<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 512 512">
				<g>
					<g>
						<g>
							<path d="M480.7,11H130.4c-11.3,0-20.4,9.1-20.4,20.4v60.3H31.5c-11.3,0-20.4,9.1-20.4,20.4v368.5c0,11.3,9.1,20.4,20.4,20.4		 h350.3c11.3,0,20.4-9.1,20.4-20.4v-60.3h78.5c11.3,0,20.4-9.1,20.4-20.4V31.4C501.1,20.1,491.9,11,480.7,11z M361.3,460.2H51.9		 V132.5h309.4V460.2z M460.2,379.5h-58.1V112.1c0-11.3-9.1-20.4-20.4-20.4h-231V51.8h309.4V379.5z"/>
							<path d="m127.8,242.6h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.3 9.1,20.4 20.4,20.4z"/>
							<path d="m127.8,390.9h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.2 9.1,20.4 20.4,20.4z"/>
						</g>
					</g>
				</g>
			</svg>
		</a>
	
</h4>
<p>Como o nome sugere controla o deploy de Pods dentro do cluster. Quando se cria esse componente, deve-se informar um template de Pod e quantos destes você precisa, e se necessário uma regra para criar mais instâncias.</p>
<p>Ele irá garantir duas coisas principalmente: que existam suficientes Pods quanto foi definido, e que os mesmos estejam atualizados em relação ao template que foi definido.</p>
<p>Então caso você mude algo no template o Deployment vai subir novos Pods e destruir os antigos para manter a expectativa (ele também &ldquo;versiona&rdquo; os deploys, então se algo explodir dá para voltar atrás).</p>
<h4 id="servicehttpskubernetesiodocsuser-guideservices">
	<a href="https://kubernetes.io/docs/user-guide/services/">Service</a>
	
		<a href="#servicehttpskubernetesiodocsuser-guideservices" class="heading-anchor"
			aria-label="copy link to this section"
			title="Copy link to this section"
			>
			<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 512 512">
				<g>
					<g>
						<g>
							<path d="M480.7,11H130.4c-11.3,0-20.4,9.1-20.4,20.4v60.3H31.5c-11.3,0-20.4,9.1-20.4,20.4v368.5c0,11.3,9.1,20.4,20.4,20.4		 h350.3c11.3,0,20.4-9.1,20.4-20.4v-60.3h78.5c11.3,0,20.4-9.1,20.4-20.4V31.4C501.1,20.1,491.9,11,480.7,11z M361.3,460.2H51.9		 V132.5h309.4V460.2z M460.2,379.5h-58.1V112.1c0-11.3-9.1-20.4-20.4-20.4h-231V51.8h309.4V379.5z"/>
							<path d="m127.8,242.6h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.3 9.1,20.4 20.4,20.4z"/>
							<path d="m127.8,390.9h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.2 9.1,20.4 20.4,20.4z"/>
						</g>
					</g>
				</g>
			</svg>
		</a>
	
</h4>
<p>Como os Pods além de efêmeros, podem existir em números variados por culpa dos Deployments, não há forma confiável de tentar conectar dois Pods diretamente, seja porque o Pod que você está dependendo pode morrer e quando voltar terá outro IP, e provavelmente outro nome, ou porque o Pod que você &ldquo;fixou&rdquo; pode não ser o mas indicado (menos ocupado ou mais próximo).</p>
<p>Para resolver esse problema existem os Services, em vez de tentar fazer as chamadas diretamente para um Pod, podemos chamar pelo nome de um Service e este irá rotear para um Pod que esteja abaixo dele.</p>
<p>É importante ressaltar que os Services fazem &ldquo;apenas&rdquo; a descoberta dos Pods, eles não os mantêm ligados, isso é responsabilidade dos Deployments.</p>
<h4 id="routehttpsdocsopenshiftorglatestarchitecturecore_conceptsrouteshtml">
	<a href="https://docs.openshift.org/latest/architecture/core_concepts/routes.html">Route</a>
	
		<a href="#routehttpsdocsopenshiftorglatestarchitecturecore_conceptsrouteshtml" class="heading-anchor"
			aria-label="copy link to this section"
			title="Copy link to this section"
			>
			<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 512 512">
				<g>
					<g>
						<g>
							<path d="M480.7,11H130.4c-11.3,0-20.4,9.1-20.4,20.4v60.3H31.5c-11.3,0-20.4,9.1-20.4,20.4v368.5c0,11.3,9.1,20.4,20.4,20.4		 h350.3c11.3,0,20.4-9.1,20.4-20.4v-60.3h78.5c11.3,0,20.4-9.1,20.4-20.4V31.4C501.1,20.1,491.9,11,480.7,11z M361.3,460.2H51.9		 V132.5h309.4V460.2z M460.2,379.5h-58.1V112.1c0-11.3-9.1-20.4-20.4-20.4h-231V51.8h309.4V379.5z"/>
							<path d="m127.8,242.6h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.3 9.1,20.4 20.4,20.4z"/>
							<path d="m127.8,390.9h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.2 9.1,20.4 20.4,20.4z"/>
						</g>
					</g>
				</g>
			</svg>
		</a>
	
</h4>
<p>Permitem que você exponha Services para a rede externa e também permite algumas regras de proxy para melhor apresentá-los.</p>
<p>Embora seja possível fazer a exposição de Services para a rede externa com Kubernetes, na plataforma da OpenShift é necessário o uso do componente Route para isso.</p>
<hr>
<p>Como comentei no início, estou escrevendo uma série de postagens para mostrar como usar o básico do Kubernetes, e no próximo post irei usar os conceitos que acabei de descrever para implementar o ambiente.</p>
<p>Próximo Post: <a href="/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-2/">clique aqui</a></p>]]></content:encoded></item></channel></rss>