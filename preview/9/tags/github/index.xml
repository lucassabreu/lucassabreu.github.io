<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Github on Lucas dos Santos Abreu</title><link>https://www.lucassabreu.net.br/preview/9/tags/github/</link><description>Recent content in Github on Lucas dos Santos Abreu</description><generator>Hugo -- gohugo.io</generator><language>pt-BR</language><lastBuildDate>Fri, 15 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.lucassabreu.net.br/preview/9/tags/github/index.xml" rel="self" type="application/rss+xml"/><item><title>Github Actions</title><link>https://www.lucassabreu.net.br/preview/9/post/github-actions/</link><pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate><guid>https://www.lucassabreu.net.br/preview/9/post/github-actions/</guid><description>Como e onde podemos usar o Github Actions para automatizar os processos do
dia a dia de um repositório, e alguns outros usos interessantes que podemos
fazer com a API de eventos disponível.</description><image><url>https://www.lucassabreu.net.br/preview/9/post/github-actions/feature.png</url></image><content:encoded><![CDATA[<h2 id="o-que-é-isso">
	O que é isso?
	
		<a href="#o-que-%c3%a9-isso" class="heading-anchor"
			aria-label="copy link to this section"
			title="Copy link to this section"
			>
			<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 512 512">
				<g>
					<g>
						<g>
							<path d="M480.7,11H130.4c-11.3,0-20.4,9.1-20.4,20.4v60.3H31.5c-11.3,0-20.4,9.1-20.4,20.4v368.5c0,11.3,9.1,20.4,20.4,20.4		 h350.3c11.3,0,20.4-9.1,20.4-20.4v-60.3h78.5c11.3,0,20.4-9.1,20.4-20.4V31.4C501.1,20.1,491.9,11,480.7,11z M361.3,460.2H51.9		 V132.5h309.4V460.2z M460.2,379.5h-58.1V112.1c0-11.3-9.1-20.4-20.4-20.4h-231V51.8h309.4V379.5z"/>
							<path d="m127.8,242.6h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.3 9.1,20.4 20.4,20.4z"/>
							<path d="m127.8,390.9h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.2 9.1,20.4 20.4,20.4z"/>
						</g>
					</g>
				</g>
			</svg>
		</a>
	
</h2>
<p>O Github Actions é primariamente uma ferramenta para implementar Continuous
Integration (CI), ou seja, automatizar a execução de ferramentas ou processos
que ajudam a garantir a qualidade do código, sejam teste unitários, análises de
código estática, analises de segurança, ou simplesmente compilar/&ldquo;buildar&rdquo; o
projeto.</p>
<p>Além disso também podemos implementar fluxos de Continuous Delivery (CD),
fazendo o deploy ou bundle do projeto de forma automática sempre que um evento
acontece, seja o <code>push</code> para uma branch, ou algum outro evento do Github.</p>
<p>Quase todas as ferramentas de CI permitem fazer esses tipos de coisa, mas o
interessante do Github Actions é que ele esta integrado com a API do Github,
então quando você quer usar funcionalidades do Github como os <a href="https://docs.github.com/en/rest/reference/repos#statuses">commit
status</a>, <a href="https://docs.github.com/en/rest/reference/repos#deployments">deployment status</a>, <a href="https://docs.github.com/en/github/collaborating-with-pull-requests/collaborating-on-repositories-with-code-quality-features/about-status-checks#checks">checks/annotations</a> o processo
é bem simples.</p>
<h2 id="como-temos-usado-o-github-actionsci">
	Como temos usado o Github Actions/CI
	
		<a href="#como-temos-usado-o-github-actionsci" class="heading-anchor"
			aria-label="copy link to this section"
			title="Copy link to this section"
			>
			<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 512 512">
				<g>
					<g>
						<g>
							<path d="M480.7,11H130.4c-11.3,0-20.4,9.1-20.4,20.4v60.3H31.5c-11.3,0-20.4,9.1-20.4,20.4v368.5c0,11.3,9.1,20.4,20.4,20.4		 h350.3c11.3,0,20.4-9.1,20.4-20.4v-60.3h78.5c11.3,0,20.4-9.1,20.4-20.4V31.4C501.1,20.1,491.9,11,480.7,11z M361.3,460.2H51.9		 V132.5h309.4V460.2z M460.2,379.5h-58.1V112.1c0-11.3-9.1-20.4-20.4-20.4h-231V51.8h309.4V379.5z"/>
							<path d="m127.8,242.6h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.3 9.1,20.4 20.4,20.4z"/>
							<path d="m127.8,390.9h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.2 9.1,20.4 20.4,20.4z"/>
						</g>
					</g>
				</g>
			</svg>
		</a>
	
</h2>
<p>Para a maioria dos projetos da <a href="https://coderockr.com">Coderockr</a> nós sempre adicionamos algumas
ferramentas para CI, que são executadas em todos os PRs e a maioria no <code>push</code>
para branchs &ldquo;principais&rdquo; (<code>main</code>, <code>develop</code>, <code>release</code>, etc).</p>
<p>Essas ferramentas fazem lint, analise estática e testes unitários; e todas elas
são &ldquo;scriptáveis&rdquo; e configuráveis, então podemos executar elas usando shell
scripts simples, capturar os arquivos com problema e suas falhas; e notificar a
pessoa desenvolvedora sobre os problemas e segurar o merge/deploy até os
problemas serem resolvidos.</p>
<h2 id="como-usar-o-github-action-para-cicd">
	Como usar o Github Action para CI/CD
	
		<a href="#como-usar-o-github-action-para-cicd" class="heading-anchor"
			aria-label="copy link to this section"
			title="Copy link to this section"
			>
			<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 512 512">
				<g>
					<g>
						<g>
							<path d="M480.7,11H130.4c-11.3,0-20.4,9.1-20.4,20.4v60.3H31.5c-11.3,0-20.4,9.1-20.4,20.4v368.5c0,11.3,9.1,20.4,20.4,20.4		 h350.3c11.3,0,20.4-9.1,20.4-20.4v-60.3h78.5c11.3,0,20.4-9.1,20.4-20.4V31.4C501.1,20.1,491.9,11,480.7,11z M361.3,460.2H51.9		 V132.5h309.4V460.2z M460.2,379.5h-58.1V112.1c0-11.3-9.1-20.4-20.4-20.4h-231V51.8h309.4V379.5z"/>
							<path d="m127.8,242.6h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.3 9.1,20.4 20.4,20.4z"/>
							<path d="m127.8,390.9h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.2 9.1,20.4 20.4,20.4z"/>
						</g>
					</g>
				</g>
			</svg>
		</a>
	
</h2>
<p>Mas beleza, nós temos as ferramentas, como integrar elas no Github Actions?
Para fazer qualquer coisa com Actions precisamos criar um <code>workflow</code>, que são
arquivos YAML que contem um ou mais conjuntos de passos a serem executados
quando um ou mais eventos acontecem.</p>
<div class="highlight"><div style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">16
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">17
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">18
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">19
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">20
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">21
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">22
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">23
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">24
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">25
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;PHPUnit&#34;</span>
<span style="color:#268bd2">on</span>:
  <span style="color:#268bd2">pull_request</span>:
  <span style="color:#268bd2">push</span>:
    <span style="color:#268bd2">branches</span>: [main]

<span style="color:#268bd2">jobs</span>:
  <span style="color:#268bd2">php-tests</span>:
    <span style="color:#268bd2">runs-on</span>: ubuntu-latest

    <span style="color:#268bd2">steps</span>:
      - <span style="color:#268bd2">name</span>: Checkout code
        <span style="color:#268bd2">uses</span>: actions/checkout@v2

      - <span style="color:#268bd2">name</span>: Setup PHP
        <span style="color:#268bd2">uses</span>: shivammathur/setup-php@v2
        <span style="color:#268bd2">with</span>:
          <span style="color:#268bd2">php-version</span>: <span style="color:#2aa198">8.0</span>
          <span style="color:#268bd2">tools</span>: composer:v2

      - <span style="color:#268bd2">name</span>: Install dependencies
        <span style="color:#268bd2">run</span>: composer install --prefer-dist

      - <span style="color:#268bd2">name</span>: Execute Unit Tests
        <span style="color:#268bd2">run</span>: php vendor/bin/phpunit
</code></pre></td></tr></table>
</div>
</div><p class="code-legend">exemplo de `workflow`</p>
<p>Um <code>workflow</code> vai ser composto de três partes:</p>
<ul>
<li><code>triggers</code> (gatilhos) que irão disparar o <code>workflow</code>. Linhas 2 a 5.</li>
<li><code>jobs</code> (trabalhos) representando um conjunto de ações sequenciais que
compartilham  um mesmo ambiente virtual. Linhas 7 a 11</li>
<li><code>steps</code> (passos) que são executados em sequencia para executar um trabalho,
podendo ser comandos de shell simples, imagens do Docker ou pacotes de
ações. Cada um dos itens dentro de <code>steps</code> na linha 12 em diante.</li>
</ul>
<p>Para adicionar o <code>workflow</code> que passei antes ao repositório basta fazer o
commit de um arquivo YAML dentro da pasta <code>.github/workflows</code>, e
automaticamente o Github irá utilizar ele assim que o evento que você definiu
acontecer com a branch que estiver (alguns eventos só vão funcionar se o
<code>workflow</code> estiver na branch padrão).</p>
<p>Esse é o tipo mais simples de <code>workflow</code> que pode ser feito no Github Actions,
executa a cada push para a <code>main</code> e em todos os <code>pull requests</code>, e a única
saída gerada é o &ldquo;commit status&rdquo;.</p>
<p>
<figure class=big>
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="phpunit-basic-checks.png"
		alt="commit status"
		
			width="944" height="223"
		
	/>
	
		<figcaption><p>commit status gerados pelo workflow</p></figcaption>
	
</figure>
</p>
<p>Mas com isso já podemos bloquear <code>pull requests</code> que não atendem a qualidade
esperada, ou que quebrem algo no caso do PHPUnit; para todas as pessoas
desenvolvedoras do projeto o acesso ao porquê o commit não passou esta a apenas
um clique de distância.</p>
<p>
<figure class=big>
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="./github-actions-check-details.png"
		alt="check details"
		
	/>
	
		<figcaption><p>logs do phpunit no github actions</p></figcaption>
	
</figure>
</p>
<h2 id="lintsanálise-estática-com-annotations">
	Lints/Análise Estática com annotations
	
		<a href="#lintsan%c3%a1lise-est%c3%a1tica-com-annotations" class="heading-anchor"
			aria-label="copy link to this section"
			title="Copy link to this section"
			>
			<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 512 512">
				<g>
					<g>
						<g>
							<path d="M480.7,11H130.4c-11.3,0-20.4,9.1-20.4,20.4v60.3H31.5c-11.3,0-20.4,9.1-20.4,20.4v368.5c0,11.3,9.1,20.4,20.4,20.4		 h350.3c11.3,0,20.4-9.1,20.4-20.4v-60.3h78.5c11.3,0,20.4-9.1,20.4-20.4V31.4C501.1,20.1,491.9,11,480.7,11z M361.3,460.2H51.9		 V132.5h309.4V460.2z M460.2,379.5h-58.1V112.1c0-11.3-9.1-20.4-20.4-20.4h-231V51.8h309.4V379.5z"/>
							<path d="m127.8,242.6h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.3 9.1,20.4 20.4,20.4z"/>
							<path d="m127.8,390.9h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.2 9.1,20.4 20.4,20.4z"/>
						</g>
					</g>
				</g>
			</svg>
		</a>
	
</h2>
<p>Podemos fazer algumas coisas mais avançadas com o Github Actions e a integração
&ldquo;auto-mágica&rdquo; com a API do Github.</p>
<p>Uma integração que fora do Github Actions precisava de um setup chatinho para
fazer, mas que é muito boa para auxiliar no revisão automática PRs são os
<a href="https://docs.github.com/en/github/collaborating-with-pull-requests/collaborating-on-repositories-with-code-quality-features/about-status-checks#checks">annotations</a>. Com eles podemos criar &ldquo;comentários&rdquo; diretamente nos arquivos
do PR/repositório de forma automatizada, marcando inclusive qual a linha que
tem o problema e qual o problema daquela linha.</p>
<p>
<figure class=big>
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="./phpstan-github-annotation.png"
		alt="phpstan github annotations"
		
	/>
	
		<figcaption><p>exemplo de annotations</p></figcaption>
	
</figure>
</p>
<p>A vantagem é que agora quando formos revisar o PR podemos focar no design da
solução e regra de negócio que esta sendo implementada, no lugar de revisar se
o fonte possui problemas estruturais ou erros de compilação/interpretação.</p>
<p>Isso é claro depende do ferramental que a linguagem que você esta trabalhando
oferece, no caso do PHP quase todos os nossos projetos vão incluir o
<a href="https://github.com/phpstan/phpstan">PHPStan</a> (ou <a href="https://github.com/phan/phan">Phan</a>), <a href="https://phpmd.org/">PHPMD</a>, <a href="https://github.com/squizlabs/PHP_CodeSniffer">PHPCS</a> e <a href="https://cs.symfony.com/">PHP CS Fixer</a> para
padronizar e analisar o código.</p>
<p>O exemplo da imagem anterior é feita com o seguinte <code>workflow</code>:</p>
<div class="highlight"><div style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">16
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">17
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">18
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">19
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">20
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">21
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">22
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">23
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">24
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">25
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">26
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">27
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">28
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;PHPStan&#34;</span>
<span style="color:#268bd2">on</span>:
  <span style="color:#268bd2">pull_request</span>:
  <span style="color:#268bd2">push</span>:
    <span style="color:#268bd2">branches</span>: [main]

<span style="color:#268bd2">jobs</span>:
  <span style="color:#268bd2">php-stan</span>:
    <span style="color:#268bd2">runs-on</span>: ubuntu-latest
    <span style="color:#268bd2">timeout-minutes</span>: <span style="color:#2aa198">15</span>
    <span style="color:#268bd2">env</span>:
      <span style="color:#268bd2">COMPOSER_NO_INTERACTION</span>: <span style="color:#2aa198">1</span>

    <span style="color:#268bd2">steps</span>:
      - <span style="color:#268bd2">name</span>: Checkout code
        <span style="color:#268bd2">uses</span>: actions/checkout@v2

      - <span style="color:#268bd2">name</span>: Setup PHP
        <span style="color:#268bd2">uses</span>: shivammathur/setup-php@v2
        <span style="color:#268bd2">with</span>:
          <span style="color:#268bd2">php-version</span>: <span style="color:#2aa198">8.0</span>
          <span style="color:#268bd2">tools</span>: composer:v2

      - <span style="color:#268bd2">name</span>: Install dependencies
        <span style="color:#268bd2">run</span>: composer install --prefer-dist

      - <span style="color:#268bd2">name</span>: Execute PHPStan
        <span style="color:#268bd2">run</span>: php vendor/bin/phpstan analyse src --level 8 --error-format=github
</code></pre></td></tr></table>
</div>
</div><p class="code-legend">exemplo de workflow com phpstan</p>
<p>O mesmo é basicamente igual ao <code>workflow</code> criado para o PHPUnit antes, mas
chamando o PHPStan dessa vez, e com isso ele já gera as <code>annotations</code>, isso
porque o Actions tem um conceito de &ldquo;<a href="https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions">workflow message commands</a>&rdquo;.</p>
<p>O Actions interpreta a saída do <code>workflow</code> e se identificar um desses padrões
abaixo ele automaticamente cria uma <code>annotation</code> com o mesmo &ldquo;nível de atenção&rdquo;
no <code>pull request</code> (se o <code>workflow</code> estiver rodando para um PR).</p>
<pre><code>::notice file={name},line={line},endLine={endLine},title={title}::{message}
::warning file={name},line={line},endLine={endLine},title={title}::{message}
::error file={name},line={line},endLine={endLine},title={title}::{message}
</code></pre><p>Então se eu criar um <code>step</code> como o abaixo:</p>
<div class="highlight"><div style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">18
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">19
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">20
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">21
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">22
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">23
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">24
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">25
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">    - <span style="color:#268bd2">name</span>: Fake
      <span style="color:#268bd2">run</span>: |<span style="color:#2aa198">
</span><span style="color:#2aa198">        echo ::notice \
</span><span style="color:#2aa198">          file=$PWD/src/Hugger/Friendly.php,line=1,col=0::this is a notice
</span><span style="color:#2aa198">        echo ::warning \
</span><span style="color:#2aa198">          file=$PWD/src/Hugger/Friendly.php,line=1,col=0::this is a warning
</span><span style="color:#2aa198">        echo ::error \
</span><span style="color:#2aa198">          file=$PWD/src/Hugger/Friendly.php,line=1,col=0::this is a error</span>        
</code></pre></td></tr></table>
</div>
</div><p>Vai gerar estas <code>annotations</code>:</p>
<p>
<figure class=big>
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="./fake-annotations.png"
		alt="fake annotation"
		
	/>
	
</figure>
</p>
<p>Isso mostra quão fácil é integrar com essa funcionalidade do Github Actions, se
a ferramenta que você usa não suporta esse formato de saída você sempre pode
aplicar um <a href="https://github.com/lucassabreu/github-actions-examples/blob/f051cee06d489998f90e4e4cb6fc71afcc5fc7ca/.github/workflows/phpcs.yaml#L35-L38"><code>sed</code></a> para resolver isso.</p>
<div class="feature">
<p>Se não estiver usando o Github Actions, uma ferramenta que ajudou a gente na
integração foi o <a href="https://github.com/roverdotcom/checkbridge">https://github.com/roverdotcom/checkbridge</a>.</p>
</div>
<h2 id="integrações-e-actions">
	Integrações e &ldquo;Actions&rdquo;
	
		<a href="#integra%c3%a7%c3%b5es-e-actions" class="heading-anchor"
			aria-label="copy link to this section"
			title="Copy link to this section"
			>
			<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 512 512">
				<g>
					<g>
						<g>
							<path d="M480.7,11H130.4c-11.3,0-20.4,9.1-20.4,20.4v60.3H31.5c-11.3,0-20.4,9.1-20.4,20.4v368.5c0,11.3,9.1,20.4,20.4,20.4		 h350.3c11.3,0,20.4-9.1,20.4-20.4v-60.3h78.5c11.3,0,20.4-9.1,20.4-20.4V31.4C501.1,20.1,491.9,11,480.7,11z M361.3,460.2H51.9		 V132.5h309.4V460.2z M460.2,379.5h-58.1V112.1c0-11.3-9.1-20.4-20.4-20.4h-231V51.8h309.4V379.5z"/>
							<path d="m127.8,242.6h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.3 9.1,20.4 20.4,20.4z"/>
							<path d="m127.8,390.9h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.2 9.1,20.4 20.4,20.4z"/>
						</g>
					</g>
				</g>
			</svg>
		</a>
	
</h2>
<p>Para a maioria das ferramentas, principalmente para as que podem/devem ser
executadas como parte do <code>pre-commit</code> usar o <code>step.run</code> é a melhor forma, ele é
fácil de entender e inclusive já mostra como executar a ferramenta sua própria
máquina. Se a pessoa desenvolvedora quiser ela não precisa fazer o push para
ver os se conseguiu resolver o problema, é só pegar o comando e executar no
terminal antes de fazer o commit e pronto.</p>
<p>Mas existem algumas etapas que podemos adicionar no <code>workflow</code> que não precisam
(talvez não devam) ser executadas localmente, por exemplo: deploys, cache de
arquivos, relatórios de cobertura, integrações com serviços externos, setup de
ferramentas para usar, etc.</p>
<p>Um exemplo simples é uma etapa para enviar o relatório de cobertura para o
<a href="https://about.codecov.io/">Codecov</a>:</p>
<div class="highlight"><div style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">35
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">36
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">37
</span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">38
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">39
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">40
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">41
</span></span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">      - <span style="color:#268bd2">name</span>: Execute Unit Tests
        <span style="color:#268bd2">run</span>: phpdbg -qrr vendor/bin/phpunit --coverage-clover=clover.xml

<span style="display:block;width:100%;background-color:#19404a">      - <span style="color:#268bd2">name</span>: Upload coverage to Codecov
</span><span style="display:block;width:100%;background-color:#19404a">        <span style="color:#268bd2">uses</span>: codecov/codecov-action@v2
</span><span style="display:block;width:100%;background-color:#19404a">        <span style="color:#268bd2">with</span>:
</span><span style="display:block;width:100%;background-color:#19404a">          <span style="color:#268bd2">files</span>: ./clover.xml
</span></code></pre></td></tr></table>
</div>
</div><p>A etapa <code>Upload coverage to Codecov</code> usa uma <code>action</code> chamada
<a href="https://github.com/marketplace/actions/codecov"><code>codecov/codecov-action</code></a>, <code>actions</code> são o que dão o nome para
a plataforma, e são plugins que podem ser adicionados aos <code>workflows</code> que
resolvem algum problema específico, que pode ser instalar o linguagem ou
ferramenta que você vai usar, como é o caso do <code>shivammathur/setup-php@v2</code>, ou
problemas como os que listei antes ou &ldquo;receitas prontas&rdquo; para alguma
ferramenta.</p>
<p>Diferente dos exemplos anteriores não passamos um script para ser executado na
etapa, mas sim qual o nome da <code>action</code> com o <code>uses</code> e (dependendo da <code>action</code>)
parâmetros complementares via <code>with</code>.</p>
<p>O Github tem um marketplace que você pode usar tanto para publicar os seus
próprios, quanto para procurar soluções prontas (por mais que o Google tenha
sido melhor para pesquisar, mas a pagina no marketplace ajuda o Google pelo
menos).</p>
<p>
<figure class=big>
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="./github-marketplace.png"
		alt="marketplace"
		
	/>
	
		<figcaption><p>marketplace com alguns actions para php</p></figcaption>
	
</figure>
</p>
<p>Podemos encontrar todo tipo de <code>action</code> pronta para ser adicionada aos
<code>workflows</code>, no meu blog eu não precisei escrever lógica para instalar o <code>hugo</code>
ou para &ldquo;buildar&rdquo; e fazer push dele para a branch <code>gh-pages</code>, isso tudo é feito
por <code>actions</code> que outras pessoas escreveram.</p>
<div class="highlight"><div style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">16
</span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">17
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">18
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">19
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">20
</span></span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">21
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">22
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">23
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">24
</span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">25
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">26
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">27
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">28
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">29
</span></span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#268bd2">name</span>: GH Pages
<span style="color:#268bd2">on</span>:
  <span style="color:#268bd2">push</span>:
    <span style="color:#268bd2">branches</span>:
      - main

<span style="color:#268bd2">jobs</span>:
  <span style="color:#268bd2">build-and-deploy</span>:
    <span style="color:#268bd2">runs-on</span>: ubuntu-latest
    <span style="color:#268bd2">steps</span>:
      - <span style="color:#268bd2">name</span>: Checkout 🛎️
        <span style="color:#268bd2">uses</span>: actions/checkout@v2.3.1
        <span style="color:#268bd2">with</span>:
          <span style="color:#268bd2">submodules</span>: <span style="color:#cb4b16">true</span>
          <span style="color:#268bd2">fetch-depth</span>: <span style="color:#2aa198">0</span>

<span style="display:block;width:100%;background-color:#19404a">      - <span style="color:#268bd2">name</span>: Setup Hugo
</span><span style="display:block;width:100%;background-color:#19404a">        <span style="color:#268bd2">uses</span>: peaceiris/actions-hugo@v2
</span><span style="display:block;width:100%;background-color:#19404a">        <span style="color:#268bd2">with</span>:
</span><span style="display:block;width:100%;background-color:#19404a">          <span style="color:#268bd2">hugo-version</span>: <span style="color:#2aa198">&#34;0.87.0&#34;</span>
</span>
      - <span style="color:#268bd2">name</span>: Build
        <span style="color:#268bd2">run</span>: hugo -v --minify -b http://www.lucassabreu.net.br

<span style="display:block;width:100%;background-color:#19404a">      - <span style="color:#268bd2">name</span>: Deploy 🚀
</span><span style="display:block;width:100%;background-color:#19404a">        <span style="color:#268bd2">uses</span>: JamesIves/github-pages-deploy-action@4.1.5
</span><span style="display:block;width:100%;background-color:#19404a">        <span style="color:#268bd2">with</span>:
</span><span style="display:block;width:100%;background-color:#19404a">          <span style="color:#268bd2">branch</span>: gh-pages
</span><span style="display:block;width:100%;background-color:#19404a">          <span style="color:#268bd2">folder</span>: public
</span></code></pre></td></tr></table>
</div>
</div><div class="code-legend">
<p><a href="https://github.com/lucassabreu/lucassabreu.github.io/blob/6a466ef778bd446b47fc6452fa6775b9c4f07f83/.github/workflows/gh-pages.yaml">.github/workflows/gh-pages.yaml</a></p>
</div>
<h3 id="docker-steps">
	Docker Steps
	
		<a href="#docker-steps" class="heading-anchor"
			aria-label="copy link to this section"
			title="Copy link to this section"
			>
			<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 512 512">
				<g>
					<g>
						<g>
							<path d="M480.7,11H130.4c-11.3,0-20.4,9.1-20.4,20.4v60.3H31.5c-11.3,0-20.4,9.1-20.4,20.4v368.5c0,11.3,9.1,20.4,20.4,20.4		 h350.3c11.3,0,20.4-9.1,20.4-20.4v-60.3h78.5c11.3,0,20.4-9.1,20.4-20.4V31.4C501.1,20.1,491.9,11,480.7,11z M361.3,460.2H51.9		 V132.5h309.4V460.2z M460.2,379.5h-58.1V112.1c0-11.3-9.1-20.4-20.4-20.4h-231V51.8h309.4V379.5z"/>
							<path d="m127.8,242.6h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.3 9.1,20.4 20.4,20.4z"/>
							<path d="m127.8,390.9h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.2 9.1,20.4 20.4,20.4z"/>
						</g>
					</g>
				</g>
			</svg>
		</a>
	
</h3>
<p>Nós usamos o Docker para o desenvolvimento local e em produção para a maioria
dos projetos para manter os ambientes o mais próximos possível. E no <a href="https://www.drone.io/">Drone
CI</a> e <a href="https://buildkite.com/">Buildkite</a> usamos as mesmas imagens (ou bem próximas) para executar
as ferramentas de analise estática e testes unitários, porque se estamos usando
uma imagem customizada é provável que eles falhem por não ter a referencia a
alguma função ou classe.</p>
<p>Nesse sentido no lugar de usar uma <code>action</code> para instalar a linguagem e ainda
adicionar extensões ou customizações do ambiente, por mais que possível, acaba
sendo um trabalho duplicado, e sempre temos de lembrar de atualizar a imagem
base e o <code>workflow</code> toda vez, para evitar esse retrabalho nós usamos imagens do
Docker como etapas para rodar as operações.</p>
<p>Podemos configurar para o <code>job</code> usar um contêiner além do ambiente virtual,
alterando o primeiro <code>workflow</code> fica assim:</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-diff" data-lang="diff">name: &#34;PHPUnit (with Docker)&#34;
on:
  pull_request:
  push:
    branches: [main]

jobs:
  php-tests:
    runs-on: ubuntu-latest
<span style="color:#719e07">+    container:
</span><span style="color:#719e07">+      image: ghcr.io/lucassabreu/php-with-exts-example:main
</span><span style="color:#719e07">+      options: --user root
</span><span style="color:#719e07"></span>
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

<span style="color:#dc322f">-      - name: Setup PHP
</span><span style="color:#dc322f">-        uses: shivammathur/setup-php@v2
</span><span style="color:#dc322f">-        with:
</span><span style="color:#dc322f">-          php-version: 8.0
</span><span style="color:#dc322f">-          tools: composer:v2
</span><span style="color:#dc322f"></span>
      - name: Install dependencies
        run: composer install --prefer-dist

      - name: Execute Unit Tests
        run: phpdbg -qrr vendor/bin/phpunit --coverage-clover=clover.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          files: ./clover.xml
</code></pre></div><p class="code-legend">exemplo usando docker</p>
<p>A imagem desse exemplo pode ser usada fora do Github, então eu tive de
adicionar o <code>--user root</code>, porque alguns <code>actions</code> precisam instalar pacotes (o
<code>actions/checkout@v2</code> instala o <code>git</code> e outras coisas).</p>
<p>Essa não é a única forma de usar imagens do Docker, se você ou a ferramenta que
você normalmente usa tiver uma imagem para ser usada, então pode adicionar a
mesma como um <code>step</code>:</p>
<div class="highlight"><div style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">14
</span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">15
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">16
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">17
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">18
</span></span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;PHPInsights&#34;</span>
<span style="color:#268bd2">on</span>:
  <span style="color:#268bd2">pull_request</span>:
  <span style="color:#268bd2">push</span>:
    <span style="color:#268bd2">branches</span>: [main]

<span style="color:#268bd2">jobs</span>:
  <span style="color:#268bd2">check</span>:
    <span style="color:#268bd2">runs-on</span>: ubuntu-latest

    <span style="color:#268bd2">steps</span>:
      - <span style="color:#268bd2">name</span>: Checkout code
        <span style="color:#268bd2">uses</span>: actions/checkout@v2

<span style="display:block;width:100%;background-color:#19404a">      - <span style="color:#268bd2">name</span>: PHPInsights
</span><span style="display:block;width:100%;background-color:#19404a">        <span style="color:#268bd2">uses</span>: docker://nunomaduro/phpinsights
</span><span style="display:block;width:100%;background-color:#19404a">        <span style="color:#268bd2">with</span>:
</span><span style="display:block;width:100%;background-color:#19404a">          <span style="color:#268bd2">args</span>: --format=github-action
</span></code></pre></td></tr></table>
</div>
</div><p class="code-legend">docker como um `step`</p>
<p>Se ela tiver um formato de saída compatível com os <a href="#lintsanalise-est%C3%A1tica-com-annotations">annotations commands</a>
então fica parecendo que é uma <code>action</code> nativa.</p>
<p>Podemos ainda executar &ldquo;Docker in Docker&rdquo; se for necessário combinar a sua imagem
própria e usar outra imagem como um <code>step</code>.</p>
<div class="highlight"><div style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 9
</span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">10
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">11
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">12
</span></span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">16
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">17
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">18
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">19
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">20
</span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">21
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">22
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">23
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">24
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">25
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">26
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">27
</span></span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;PHPCS (Docker in Docker)&#34;</span>
<span style="color:#268bd2">on</span>:
  <span style="color:#268bd2">pull_request</span>:
  <span style="color:#268bd2">push</span>:
    <span style="color:#268bd2">branches</span>: [main]

<span style="color:#268bd2">jobs</span>:
  <span style="color:#268bd2">check</span>:
    <span style="color:#268bd2">runs-on</span>: ubuntu-latest
<span style="display:block;width:100%;background-color:#19404a">    <span style="color:#268bd2">container</span>:
</span><span style="display:block;width:100%;background-color:#19404a">      <span style="color:#268bd2">image</span>: ghcr.io/lucassabreu/php-with-exts-example:main
</span><span style="display:block;width:100%;background-color:#19404a">      <span style="color:#268bd2">options</span>: --user root
</span>
    <span style="color:#268bd2">steps</span>:
      - <span style="color:#268bd2">name</span>: Checkout code
        <span style="color:#268bd2">uses</span>: actions/checkout@v2

      - <span style="color:#268bd2">name</span>: Install dependencies
        <span style="color:#268bd2">run</span>: composer install --prefer-dist

<span style="display:block;width:100%;background-color:#19404a">      - <span style="color:#268bd2">name</span>: PHPCS
</span><span style="display:block;width:100%;background-color:#19404a">        <span style="color:#268bd2">uses</span>: docker://phpqa/phpcs
</span><span style="display:block;width:100%;background-color:#19404a">        <span style="color:#268bd2">with</span>:
</span><span style="display:block;width:100%;background-color:#19404a">          <span style="color:#268bd2">args</span>: |<span style="color:#2aa198">
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="color:#2aa198">            sh -c &#34;phpcs src --report=emacs \
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="color:#2aa198">              | sed \&#34;s|^.*src|src|;s|\(.*\):\(.*\):\(.*\):\(.*\)|\
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="color:#2aa198">                ::error file=\1,line=\2,col=\3::\4|\&#34;&#34;</span>            
</span></code></pre></td></tr></table>
</div>
</div><p class="code-legend">docker in docker</p>
<h3 id="secrets">
	Secrets
	
		<a href="#secrets" class="heading-anchor"
			aria-label="copy link to this section"
			title="Copy link to this section"
			>
			<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 512 512">
				<g>
					<g>
						<g>
							<path d="M480.7,11H130.4c-11.3,0-20.4,9.1-20.4,20.4v60.3H31.5c-11.3,0-20.4,9.1-20.4,20.4v368.5c0,11.3,9.1,20.4,20.4,20.4		 h350.3c11.3,0,20.4-9.1,20.4-20.4v-60.3h78.5c11.3,0,20.4-9.1,20.4-20.4V31.4C501.1,20.1,491.9,11,480.7,11z M361.3,460.2H51.9		 V132.5h309.4V460.2z M460.2,379.5h-58.1V112.1c0-11.3-9.1-20.4-20.4-20.4h-231V51.8h309.4V379.5z"/>
							<path d="m127.8,242.6h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.3 9.1,20.4 20.4,20.4z"/>
							<path d="m127.8,390.9h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.2 9.1,20.4 20.4,20.4z"/>
						</g>
					</g>
				</g>
			</svg>
		</a>
	
</h3>
<p>Ainda tem um ponto importante para vários fluxos de CI (e principalmente
Continuous Delivery), que é lidar com informações sensíveis (chaves RSA, tokens
de acesso, JWTs, OAuth Client secrets, senhas).</p>
<p>Exceto se o seu CI esta integrado com o provedor que irá executar o seu
ambiente (Openshift/Kubernetes), é provável que você vai precisar ter alguma
chave para poder se conectar a sua VPS, seja para copiar arquivos via RSYNC,
fazer o push de imagens para registros do Docker, conectar via SSH, ou apenas
disparar algum evento no seu provedor.</p>
<p>E ter essa chave aberta no YAML do <code>workflow</code> esta longe de ser uma boa
prática, para resolver esse problema o Github permite que registremos valores
para o repositório que são acessíveis apenas dentro do <code>actions</code>.</p>
<p>
<figure class=big>
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="./github-secrets.png"
		alt="github-secrets"
		
	/>
	
		<figcaption><p>segredos do repositório</p></figcaption>
	
</figure>
</p>
<p>Esses caras ficam disponíveis para todos os <code>workflows</code>, e pode ser usados
simplesmente usando o contexto <code>secrets</code> no YAML.</p>
<p>Por exemplo, se o seu repositório for privado, o Codecov obriga você a usar um
token para enviar o relatório de cobertura.</p>
<div class="highlight"><div style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">30
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">31
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">32
</span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">33
</span></span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">34
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">      - <span style="color:#268bd2">name</span>: Upload coverage to Codecov
        <span style="color:#268bd2">uses</span>: codecov/codecov-action@v2
        <span style="color:#268bd2">with</span>:
<span style="display:block;width:100%;background-color:#19404a">          <span style="color:#268bd2">token</span>: ${{ secrets.CODECOV_TOKEN }}
</span>          <span style="color:#268bd2">files</span>: ./clover.xml
</code></pre></td></tr></table>
</div>
</div><p>Agora sempre que o <code>workflow</code> for executado o Github vai automaticamente
injetar o segredo na <code>step</code>.</p>
<h2 id="outros-eventos-e-usos">
	Outros eventos e usos
	
		<a href="#outros-eventos-e-usos" class="heading-anchor"
			aria-label="copy link to this section"
			title="Copy link to this section"
			>
			<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 512 512">
				<g>
					<g>
						<g>
							<path d="M480.7,11H130.4c-11.3,0-20.4,9.1-20.4,20.4v60.3H31.5c-11.3,0-20.4,9.1-20.4,20.4v368.5c0,11.3,9.1,20.4,20.4,20.4		 h350.3c11.3,0,20.4-9.1,20.4-20.4v-60.3h78.5c11.3,0,20.4-9.1,20.4-20.4V31.4C501.1,20.1,491.9,11,480.7,11z M361.3,460.2H51.9		 V132.5h309.4V460.2z M460.2,379.5h-58.1V112.1c0-11.3-9.1-20.4-20.4-20.4h-231V51.8h309.4V379.5z"/>
							<path d="m127.8,242.6h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.3 9.1,20.4 20.4,20.4z"/>
							<path d="m127.8,390.9h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.2 9.1,20.4 20.4,20.4z"/>
						</g>
					</g>
				</g>
			</svg>
		</a>
	
</h2>
<p>Agora que temos uma ideia de como criar os <code>workflows</code> e também como combinar
<code>actions</code> prontas, seja do <a href="https://github.com/marketplace/actions">Github Marketplace</a> ou imagens do
Docker.</p>
<p>Vamos dar uma explorada em alguns outros eventos interessantes que podemos usar
nos <code>actions</code> que podem ser usados para alguns comportamentos customizados.</p>
<h3 id="cron-schedule">
	CRON (<code>schedule</code>)
	
		<a href="#cron-schedule" class="heading-anchor"
			aria-label="copy link to this section"
			title="Copy link to this section"
			>
			<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 512 512">
				<g>
					<g>
						<g>
							<path d="M480.7,11H130.4c-11.3,0-20.4,9.1-20.4,20.4v60.3H31.5c-11.3,0-20.4,9.1-20.4,20.4v368.5c0,11.3,9.1,20.4,20.4,20.4		 h350.3c11.3,0,20.4-9.1,20.4-20.4v-60.3h78.5c11.3,0,20.4-9.1,20.4-20.4V31.4C501.1,20.1,491.9,11,480.7,11z M361.3,460.2H51.9		 V132.5h309.4V460.2z M460.2,379.5h-58.1V112.1c0-11.3-9.1-20.4-20.4-20.4h-231V51.8h309.4V379.5z"/>
							<path d="m127.8,242.6h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.3 9.1,20.4 20.4,20.4z"/>
							<path d="m127.8,390.9h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.2 9.1,20.4 20.4,20.4z"/>
						</g>
					</g>
				</g>
			</svg>
		</a>
	
</h3>
<p>As CRONs no Github Actions rodam automaticamente com base numa periodicidade
que você definir, sempre usando a branch padrão do projeto.</p>
<p>Com esse evento podemos, por exemplo, avaliar se PRs ou Issues no Github estão
abertas por muito tempo, e dessa forma podem ser um risco, e marcar eles como
<code>stale</code>, ou notificar o time no Slack para não ser esquecida.</p>
<p>Também pode usá-lo para rodar processos que sejam muito grandes/lentos para se
executar num PR ou no merge da branch.</p>
<p>Uma coisa legal para automatizar e melhorar o seu perfil do Github, é o
<code>gautamkrishnar/blog-post-workflow</code>.</p>
<div class="highlight"><div style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">14
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#268bd2">name</span>: Wakatime
<span style="color:#268bd2">on</span>:
  <span style="color:#268bd2">schedule</span>:
    - <span style="color:#268bd2">cron</span>: <span style="color:#2aa198">&#34;0 0 * * *&#34;</span>

<span style="color:#268bd2">jobs</span>:
  <span style="color:#268bd2">update-readme</span>:
    <span style="color:#268bd2">name</span>: Update this repo&#39;s README
    <span style="color:#268bd2">runs-on</span>: ubuntu-latest
    <span style="color:#268bd2">steps</span>:
      - <span style="color:#268bd2">uses</span>: lucassabreu/waka-readme@master
        <span style="color:#268bd2">with</span>:
          <span style="color:#268bd2">WAKATIME_API_KEY</span>: ${{ secrets.WAKATIME_API_KEY }}
          <span style="color:#268bd2">SHOW_TIME</span>: <span style="color:#cb4b16">false</span>
</code></pre></td></tr></table>
</div>
</div><p>O <a href="https://github.com/gautamkrishnar/blog-post-workflow"><code>gautamkrishnar/blog-post-workflow</code></a> consulta o RSS to seu blog
e insere as ultimas postagens que você fez, no caso essa CRON executa todo dia
a meia noite.</p>
<p>
<figure class=big>
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="./github-cron-profile.png"
		alt="github-file"
		
	/>
	
		<figcaption><p>exemplo de cron alterando perfil do github</p></figcaption>
	
</figure>
</p>
<p>A expressão que vai na propriedade <code>cron</code> é o padrão <a href="https://en.wikipedia.org/wiki/Cron"><em>POSIX</em></a>.</p>
<h3 id="pull-request-labels-labelled">
	Pull Request Labels (<code>labelled</code>)
	
		<a href="#pull-request-labels-labelled" class="heading-anchor"
			aria-label="copy link to this section"
			title="Copy link to this section"
			>
			<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 512 512">
				<g>
					<g>
						<g>
							<path d="M480.7,11H130.4c-11.3,0-20.4,9.1-20.4,20.4v60.3H31.5c-11.3,0-20.4,9.1-20.4,20.4v368.5c0,11.3,9.1,20.4,20.4,20.4		 h350.3c11.3,0,20.4-9.1,20.4-20.4v-60.3h78.5c11.3,0,20.4-9.1,20.4-20.4V31.4C501.1,20.1,491.9,11,480.7,11z M361.3,460.2H51.9		 V132.5h309.4V460.2z M460.2,379.5h-58.1V112.1c0-11.3-9.1-20.4-20.4-20.4h-231V51.8h309.4V379.5z"/>
							<path d="m127.8,242.6h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.3 9.1,20.4 20.4,20.4z"/>
							<path d="m127.8,390.9h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.2 9.1,20.4 20.4,20.4z"/>
						</g>
					</g>
				</g>
			</svg>
		</a>
	
</h3>
<p>Podemos ouvir quando são modificadas as <code>labels</code> de um PR e com isso podemos
automatizar a subida de ambientes quando formos testar o mesmo, ou visualizar
como uma postagem vai ficar sem de fato publicar ela nosso blog pessoal.</p>
<div class="highlight"><div style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 2
</span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 3
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 4
</span></span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 7
</span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 8
</span></span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">16
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">17
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">18
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">19
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">20
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">21
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">22
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">23
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">24
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">25
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">26
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">27
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">28
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">29
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">30
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">31
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">32
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">33
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#268bd2">name</span>: GH Pages (Preview PR)
<span style="color:#268bd2">on</span>:
<span style="display:block;width:100%;background-color:#19404a">  <span style="color:#268bd2">pull_request</span>:
</span><span style="display:block;width:100%;background-color:#19404a">    <span style="color:#268bd2">types</span>: [labeled]
</span>
<span style="color:#268bd2">jobs</span>:
  <span style="color:#268bd2">build-and-preview</span>:
<span style="display:block;width:100%;background-color:#19404a">    <span style="color:#268bd2">if</span>: ${{ github.event.label.name == &#39;preview-pr&#39; }}
</span>    <span style="color:#268bd2">runs-on</span>: ubuntu-latest
    <span style="color:#268bd2">steps</span>:
      - <span style="color:#268bd2">name</span>: Checkout 🛎️
        <span style="color:#268bd2">uses</span>: actions/checkout@v2.3.1
        <span style="color:#268bd2">with</span>:
          <span style="color:#268bd2">submodules</span>: <span style="color:#cb4b16">true</span>
          <span style="color:#268bd2">fetch-depth</span>: <span style="color:#2aa198">0</span>

      - <span style="color:#268bd2">name</span>: Setup Hugo
        <span style="color:#268bd2">uses</span>: peaceiris/actions-hugo@v2
        <span style="color:#268bd2">with</span>:
          <span style="color:#268bd2">hugo-version</span>: <span style="color:#2aa198">&#34;0.87.0&#34;</span>

      - <span style="color:#268bd2">name</span>: Build
        <span style="color:#268bd2">run</span>: |<span style="color:#2aa198">
</span><span style="color:#2aa198">          REL=preview/${{ github.event.number }}
</span><span style="color:#2aa198">          hugo -d public/$REL -v --minify \
</span><span style="color:#2aa198">            -b http://www.lucassabreu.net.br/$REL</span>          

      - <span style="color:#268bd2">name</span>: Deploy 🚀
        <span style="color:#268bd2">uses</span>: JamesIves/github-pages-deploy-action@4.1.5
        <span style="color:#268bd2">with</span>:
          <span style="color:#268bd2">branch</span>: gh-pages
          <span style="color:#268bd2">folder</span>: public
          <span style="color:#268bd2">clean</span>: <span style="color:#cb4b16">false</span>
</code></pre></td></tr></table>
</div>
</div><div class="code-legend">
<p><a href="https://github.com/lucassabreu/lucassabreu.github.io/blob/6a466ef778bd446b47fc6452fa6775b9c4f07f83/.github/workflows/render-preview.yaml">.github/workflows/render-preview.yaml</a></p>
</div>
<p>Se quiser ainda pode usar o <code>actions/github-script</code> para remover a <code>label</code> no
fim do deploy, e colocar outra para indicar que concluiu. Mas já deixar pronto
para iniciar o deploy de novo.</p>
<div class="highlight"><div style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">35
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">36
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">37
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">38
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">39
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">40
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">41
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">42
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">43
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">44
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">45
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">46
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">47
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">48
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">49
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">      - <span style="color:#268bd2">uses</span>: actions/github-script@v4
        <span style="color:#268bd2">with</span>:
          <span style="color:#268bd2">script</span>: |<span style="color:#2aa198">
</span><span style="color:#2aa198">            github.issues.removeLabel({
</span><span style="color:#2aa198">              owner: context.repo.owner,
</span><span style="color:#2aa198">              repo: context.repo.repo,
</span><span style="color:#2aa198">              issue_number: context.payload.number,
</span><span style="color:#2aa198">              name: &#39;preview-pr&#39;
</span><span style="color:#2aa198">            })
</span><span style="color:#2aa198">            github.issues.addLabels({
</span><span style="color:#2aa198">              owner: context.repo.owner,
</span><span style="color:#2aa198">              repo: context.repo.repo,
</span><span style="color:#2aa198">              issue_number: context.payload.number,
</span><span style="color:#2aa198">              labels: [&#39;preview-deployed&#39;]
</span><span style="color:#2aa198">            })</span>            
</code></pre></td></tr></table>
</div>
</div><p class="code-legend">apenas um extra para facilitar</p>
<p>Para fazer com todos os commits feitos para o PR passem a fazer o deploy depois
de adicionar a <code>label</code>, é só caso de mudar um pouco o cabeçalho do <code>workflow</code>:</p>
<div class="highlight"><div style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 4
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 5
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 7
</span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 8
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 9
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">10
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">11
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">12
</span></span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">13
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#268bd2">name</span>: GH Pages (Preview PR)
<span style="color:#268bd2">on</span>:
  <span style="color:#268bd2">pull_request</span>:
    <span style="color:#268bd2">types</span>: [labeled, opened, synchronize, reopened]

<span style="color:#268bd2">jobs</span>:
  <span style="color:#268bd2">build-and-preview</span>:
<span style="display:block;width:100%;background-color:#19404a">    <span style="color:#268bd2">if</span>: |<span style="color:#2aa198">
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="color:#2aa198">      ${{
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="color:#2aa198">        github.event.label.name == &#39;preview-pr&#39; ||
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="color:#2aa198">        contains(github.event.pull_request.labels.*.name, &#39;preview-deployed&#39;)
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="color:#2aa198">      }}</span>      
</span>    <span style="color:#268bd2">runs-on</span>: ubuntu-latest
</code></pre></td></tr></table>
</div>
</div><h3 id="comentários-issue_comment">
	Comentários (<code>issue_comment</code>)
	
		<a href="#coment%c3%a1rios-issue_comment" class="heading-anchor"
			aria-label="copy link to this section"
			title="Copy link to this section"
			>
			<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 512 512">
				<g>
					<g>
						<g>
							<path d="M480.7,11H130.4c-11.3,0-20.4,9.1-20.4,20.4v60.3H31.5c-11.3,0-20.4,9.1-20.4,20.4v368.5c0,11.3,9.1,20.4,20.4,20.4		 h350.3c11.3,0,20.4-9.1,20.4-20.4v-60.3h78.5c11.3,0,20.4-9.1,20.4-20.4V31.4C501.1,20.1,491.9,11,480.7,11z M361.3,460.2H51.9		 V132.5h309.4V460.2z M460.2,379.5h-58.1V112.1c0-11.3-9.1-20.4-20.4-20.4h-231V51.8h309.4V379.5z"/>
							<path d="m127.8,242.6h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.3 9.1,20.4 20.4,20.4z"/>
							<path d="m127.8,390.9h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.2 9.1,20.4 20.4,20.4z"/>
						</g>
					</g>
				</g>
			</svg>
		</a>
	
</h3>
<p>Ouvindo os comentários é possível criar comportamentos ainda mais complexos,
podemos até criar um mini &ldquo;chat bot&rdquo; que reage a comentários específicos ou a
padrões de comando, que nem o bots do Slack ou do Discord.</p>
<p>Como esse <code>workflow</code> reage a eventos que não tem necessariamente relação a
código ele precisa estar estar na branch padrão para funcionar, então se for
criar alguma automação para um PR você não vai conseguir testar ele até chegar
na <code>main</code>.</p>
<p>Usando a API do Github da para fazer a uma versão no <a href="https://en.wikipedia.org/wiki/Cowsay"><code>cowsay</code></a> via
comentários.</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#268bd2">name</span>: <span style="color:#2aa198">&#34;Octocat say&#34;</span>
<span style="color:#268bd2">on</span>:
  <span style="color:#268bd2">issue_comment</span>:
    <span style="color:#268bd2">types</span>: [created]

<span style="color:#268bd2">jobs</span>:
  <span style="color:#268bd2">cowsay</span>:
    <span style="color:#268bd2">if</span>: <span style="color:#2aa198">&#34;${{ startsWith(github.event.comment.body, &#39;/say&#39;) }}&#34;</span>
    <span style="color:#268bd2">runs-on</span>: ubuntu-latest

    <span style="color:#268bd2">steps</span>:
      - <span style="color:#268bd2">name</span>: Octocat says
        <span style="color:#268bd2">uses</span>: actions/github-script@v5
        <span style="color:#268bd2">with</span>:
          <span style="color:#268bd2">script</span>: |<span style="color:#2aa198">
</span><span style="color:#2aa198">            const message = context.payload.comment.body.substring(5) ||
</span><span style="color:#2aa198">              (await github.rest.meta.getZen()).data;
</span><span style="color:#2aa198">            const say = await github.rest.meta.getOctocat({
</span><span style="color:#2aa198">              s: message
</span><span style="color:#2aa198">            });
</span><span style="color:#2aa198">            github.rest.issues.createComment({
</span><span style="color:#2aa198">              owner: context.repo.owner,
</span><span style="color:#2aa198">              repo: context.repo.repo,
</span><span style="color:#2aa198">              issue_number: context.payload.issue.number,
</span><span style="color:#2aa198">              body: &#34;```\n&#34; + (new TextDecoder().decode(say.data)) + &#34;\n```&#34;,
</span><span style="color:#2aa198">            });</span>            
</code></pre></div><p class="code-legend">`workflow` para responder comentários</p>
<p>O <code>workflow</code> acima pode gerar esses dois resultados:</p>
<p>
<figure class=big>
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="./octocat-say-quote.png"
		alt=""
		
	/>
	
		<figcaption><p>uma frase aleatória com octocat</p></figcaption>
	
</figure>


<figure class=big>
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="./octocat-say-repeat-me.png"
		alt=""
		
	/>
	
		<figcaption><p>repete a frase passada</p></figcaption>
	
</figure>
</p>
<p>E aqui abre as portas da criatividade&hellip;</p>
<ul>
<li>iniciar um deploy e passar um prefixo para ser usado? <em>Dá para fazer!</em></li>
<li>promover a branch do PR para um ambiente específico? <em>Dá para fazer!!</em></li>
<li>mandar uma cópia do comentário que acabou de escrever e os últimos
comentários feitos no PR para um canal específico no Slack para continuar a
conversar de forma mais síncrona? <em>Dá para fazer!!!</em></li>
</ul>
<h3 id="manual-workflow_dispatch-e-repository_dispatch">
	Manual (<code>workflow_dispatch</code> e <code>repository_dispatch</code>)
	
		<a href="#manual-workflow_dispatch-e-repository_dispatch" class="heading-anchor"
			aria-label="copy link to this section"
			title="Copy link to this section"
			>
			<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 512 512">
				<g>
					<g>
						<g>
							<path d="M480.7,11H130.4c-11.3,0-20.4,9.1-20.4,20.4v60.3H31.5c-11.3,0-20.4,9.1-20.4,20.4v368.5c0,11.3,9.1,20.4,20.4,20.4		 h350.3c11.3,0,20.4-9.1,20.4-20.4v-60.3h78.5c11.3,0,20.4-9.1,20.4-20.4V31.4C501.1,20.1,491.9,11,480.7,11z M361.3,460.2H51.9		 V132.5h309.4V460.2z M460.2,379.5h-58.1V112.1c0-11.3-9.1-20.4-20.4-20.4h-231V51.8h309.4V379.5z"/>
							<path d="m127.8,242.6h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.3 9.1,20.4 20.4,20.4z"/>
							<path d="m127.8,390.9h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.2 9.1,20.4 20.4,20.4z"/>
						</g>
					</g>
				</g>
			</svg>
		</a>
	
</h3>
<p>O <code>workflow_dispatch</code> e o <code>repository_dispatch</code> atende a situação em que você
precisa iniciar um <code>workflow</code> para reagir a algum evento externo ao Github,
ele até pode ser automático do ponto de vista do seu processo, mas para o Github é
praticamente o equivalente a um webhook.</p>
<p>Similar ao <code>issue_comment</code> como esses <code>workflows</code> reagem a ações não
necessariamente relacionadas a PRs, você vai precisar que eles estejam na
branch padrão para funcionar.</p>
<p>Como nos outros casos, aqui é uma questão de criatividade e necessidade quanto
ao que pode ser feito, o mais comum é criar um <code>workflow</code> para deploy do
projeto onde você pode informar qual o ambiente que será atualizado e qual
referencia usar.</p>
<h4 id="workflow_dispatch">
	<code>workflow_dispatch</code>
	
		<a href="#workflow_dispatch" class="heading-anchor"
			aria-label="copy link to this section"
			title="Copy link to this section"
			>
			<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 512 512">
				<g>
					<g>
						<g>
							<path d="M480.7,11H130.4c-11.3,0-20.4,9.1-20.4,20.4v60.3H31.5c-11.3,0-20.4,9.1-20.4,20.4v368.5c0,11.3,9.1,20.4,20.4,20.4		 h350.3c11.3,0,20.4-9.1,20.4-20.4v-60.3h78.5c11.3,0,20.4-9.1,20.4-20.4V31.4C501.1,20.1,491.9,11,480.7,11z M361.3,460.2H51.9		 V132.5h309.4V460.2z M460.2,379.5h-58.1V112.1c0-11.3-9.1-20.4-20.4-20.4h-231V51.8h309.4V379.5z"/>
							<path d="m127.8,242.6h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.3 9.1,20.4 20.4,20.4z"/>
							<path d="m127.8,390.9h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.2 9.1,20.4 20.4,20.4z"/>
						</g>
					</g>
				</g>
			</svg>
		</a>
	
</h4>
<p>Dos dois o <code>workflow_dispatch</code> é o mais orientado a ideia de um humano
disparando o mesmo, tendo uma sessão para descrever as entradas que ele espera
e uma UI do Github com base nessas entradas para facilitar o disparo.</p>
<p>É interessante vincular o <code>workflow_dispatch</code> a todos os <code>workflows</code> que sejam
CRONs, pois o Github trata eles de forma especial e mostra um botão para rodar
diretamente da aba &ldquo;Actions&rdquo; do repositório.</p>
<p>Um outro diferencial é permitir declarar entradas customizadas para serem
usadas nos <code>jobs</code>, essa entradas vão ser lidas pelo Github e ele vai criar um
formulário para informá-las quando clicar no botão &ldquo;run workflow&rdquo;.</p>
<p>
<figure >
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="./github-workflow-dispatch.png"
		alt=""
		
	/>
	
		<figcaption><p>formulário de disparo do github</p></figcaption>
	
</figure>
</p>
<p>Para gerar o formulário acima, você cria um YAML como o abaixo:</p>
<div class="highlight"><div style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 3
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 4
</span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 5
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 6
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 7
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 8
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 9
</span></span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">16
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">17
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">18
</span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">19
</span></span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#268bd2">name</span>: Blog in Readme

<span style="color:#268bd2">on</span>:
  <span style="color:#268bd2">workflow_dispatch</span>:
<span style="display:block;width:100%;background-color:#19404a">    <span style="color:#268bd2">inputs</span>:
</span><span style="display:block;width:100%;background-color:#19404a">      <span style="color:#268bd2">postsCount</span>:
</span><span style="display:block;width:100%;background-color:#19404a">        <span style="color:#268bd2">description</span>: number of posts to show
</span><span style="display:block;width:100%;background-color:#19404a">        <span style="color:#268bd2">required</span>: <span style="color:#cb4b16">false</span>
</span><span style="display:block;width:100%;background-color:#19404a">        <span style="color:#268bd2">default</span>: <span style="color:#2aa198">3</span>
</span>
<span style="color:#268bd2">jobs</span>:
  <span style="color:#268bd2">update</span>:
    <span style="color:#268bd2">runs-on</span>: ubuntu-latest
    <span style="color:#268bd2">steps</span>:
      - <span style="color:#268bd2">uses</span>: actions/checkout@v2
      - <span style="color:#268bd2">uses</span>: gautamkrishnar/blog-post-workflow@master
        <span style="color:#268bd2">with</span>:
          <span style="color:#268bd2">feed_list</span>: https://www.lucassabreu.net.br/index.xml
<span style="display:block;width:100%;background-color:#19404a">          <span style="color:#268bd2">max_post_count</span>: ${{ github.event.inputs.postsCount || 3 }}
</span></code></pre></td></tr></table>
</div>
</div><p>Um <code>workflow</code> podem ter várias entradas, é apenas o caso de repetir a estrutura
do <code>postsCount</code> varias vezes, sendo que cada um deve ter um nome único. Os
valores dos <code>inputs</code> vão ser adicionados ao contexto <code>github.event.inputs</code>
e podem ser usadas como qualquer outro contexto.</p>
<p>Como a imagem sugere você pode rodar o <code>workflow</code> em outras branchs que não a
padrão, uma coisa que a interface do Github não permite, mas que usando o
<a href="https://github.com/cli/cli"><code>gh</code></a> ou API você consegue é usar uma tag/release como a referencia.</p>
<pre><code>❯ gh workflow run blog.yml -f postsCount=5 --ref v0.1
✓ Created workflow_dispatch event for blog.yml at v0.1

To see runs for this workflow, try: gh run list --workflow=blog.yml
</code></pre><h4 id="repository_dispatch">
	<code>repository_dispatch</code>
	
		<a href="#repository_dispatch" class="heading-anchor"
			aria-label="copy link to this section"
			title="Copy link to this section"
			>
			<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 512 512">
				<g>
					<g>
						<g>
							<path d="M480.7,11H130.4c-11.3,0-20.4,9.1-20.4,20.4v60.3H31.5c-11.3,0-20.4,9.1-20.4,20.4v368.5c0,11.3,9.1,20.4,20.4,20.4		 h350.3c11.3,0,20.4-9.1,20.4-20.4v-60.3h78.5c11.3,0,20.4-9.1,20.4-20.4V31.4C501.1,20.1,491.9,11,480.7,11z M361.3,460.2H51.9		 V132.5h309.4V460.2z M460.2,379.5h-58.1V112.1c0-11.3-9.1-20.4-20.4-20.4h-231V51.8h309.4V379.5z"/>
							<path d="m127.8,242.6h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.3 9.1,20.4 20.4,20.4z"/>
							<path d="m127.8,390.9h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.2 9.1,20.4 20.4,20.4z"/>
						</g>
					</g>
				</g>
			</svg>
		</a>
	
</h4>
<p>O <code>repository_dispatch</code> também é considerado um &ldquo;evento manual&rdquo;, mas diferente
do <code>workflow_dispatch</code> que indica a execução de um <code>workflow</code> apenas, este pode
disparar um ou mais <code>workflows</code> a um evento customizado do no repositório.</p>
<p>Ouvir eventos customizados permite que possamos iniciar o <code>workflow</code> sem saber
o ID do mesmo, ou sequer o arquivo. Então se você tiver processos externos ao
Github que você gostaria que executassem algo no repositório você pode fazer uma
chamada como a abaixo.</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">curl -vs <span style="color:#2aa198">&#34;https://api.github.com/repos/</span><span style="color:#2aa198">${</span><span style="color:#268bd2">owner</span><span style="color:#2aa198">}</span><span style="color:#2aa198">/</span><span style="color:#2aa198">${</span><span style="color:#268bd2">repo</span><span style="color:#2aa198">}</span><span style="color:#2aa198">/dispatches&#34;</span> <span style="color:#cb4b16">\
</span><span style="color:#cb4b16"></span>  -H <span style="color:#2aa198">&#34;content-type: applicatin/json&#34;</span> -H <span style="color:#2aa198">&#34;accept: application/vnd.github.v3+json&#34;</span> <span style="color:#cb4b16">\
</span><span style="color:#cb4b16"></span>  -H <span style="color:#2aa198">&#34;authorization: bearer </span><span style="color:#2aa198">${</span><span style="color:#268bd2">GITHUB_TOKEN</span><span style="color:#2aa198">}</span><span style="color:#2aa198">&#34;</span> <span style="color:#cb4b16">\
</span><span style="color:#cb4b16"></span>  -d <span style="color:#2aa198">&#39;{&#34;event_type&#34;: &#34;update-collaborators-contribution&#34;}&#39;</span>
</code></pre></div><p>E para ouvir esse evento customizado você precisa ter um <code>workflow</code> como esse
aqui na sua branch padrão:</p>
<div class="highlight"><div style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 3
</span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 4
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 5
</span></span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">11
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#268bd2">name</span>: Compile Contributions

<span style="color:#268bd2">on</span>:
<span style="display:block;width:100%;background-color:#19404a">  <span style="color:#268bd2">repository_dispatch</span>:
</span><span style="display:block;width:100%;background-color:#19404a">    <span style="color:#268bd2">types</span>: [<span style="color:#2aa198">&#34;update-collaborators-contribution&#34;</span>]
</span>
<span style="color:#268bd2">jobs</span>:
  <span style="color:#268bd2">compile</span>:
    <span style="color:#268bd2">runs-on</span>: ubuntu-latest
    <span style="color:#268bd2">steps</span>:
      - <span style="color:#268bd2">run</span>: echo &#34;something?&#34;
</code></pre></td></tr></table>
</div>
</div><p>Caso seja necessário fornecer algum parâmetro específico para o <code>workflow</code>
você pode passar um objeto JSON no campo <code>client_payload</code> com eles.</p>
<p>Alterando o exemplo do <code>workflow_dispatch</code> para suportar o
<code>repository_dispatch</code> ficaria assim:</p>
<div class="highlight"><div style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
<table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;"><tr><td style="vertical-align:top;padding:0;margin:0;border:0;">
<pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 1
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 2
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 3
</span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 4
</span></span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 5
</span></span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 6
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 7
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 8
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050"> 9
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">10
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">11
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">12
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">13
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">14
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">15
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">16
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">17
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">18
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">19
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">20
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">21
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">22
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">23
</span><span style="display:block;width:100%;background-color:#19404a"><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">24
</span></span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">25
</span><span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#495050">26
</span></code></pre></td>
<td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
<pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#268bd2">name</span>: Blog in Readme

<span style="color:#268bd2">on</span>:
<span style="display:block;width:100%;background-color:#19404a">  <span style="color:#268bd2">repository_dispatch</span>:
</span><span style="display:block;width:100%;background-color:#19404a">    <span style="color:#268bd2">types</span>: [ update-readme ]
</span>  <span style="color:#268bd2">workflow_dispatch</span>:
    <span style="color:#268bd2">inputs</span>:
      <span style="color:#268bd2">postsCount</span>:
        <span style="color:#268bd2">description</span>: number of posts to show
        <span style="color:#268bd2">required</span>: <span style="color:#cb4b16">false</span>
        <span style="color:#268bd2">default</span>: <span style="color:#2aa198">3</span>

<span style="color:#268bd2">jobs</span>:
  <span style="color:#268bd2">update</span>:
    <span style="color:#268bd2">runs-on</span>: ubuntu-latest
    <span style="color:#268bd2">steps</span>:
      - <span style="color:#268bd2">uses</span>: actions/checkout@v2
      - <span style="color:#268bd2">uses</span>: gautamkrishnar/blog-post-workflow@master
        <span style="color:#268bd2">with</span>:
          <span style="color:#268bd2">feed_list</span>: https://www.lucassabreu.net.br/index.xml
          <span style="color:#268bd2">max_post_count</span>: |<span style="color:#2aa198">
</span><span style="color:#2aa198">            ${{
</span><span style="color:#2aa198">              github.event.inputs.postsCount ||
</span><span style="display:block;width:100%;background-color:#19404a"><span style="color:#2aa198">              github.event.client_payload.postsCount ||
</span></span><span style="color:#2aa198">              3
</span><span style="color:#2aa198">            }}</span>            
</code></pre></td></tr></table>
</div>
</div><p>Se por algum motivo eu resolver que quero mostrar 10 post é executar um <code>CURL</code>
com o <code>client_payload</code> no corpo.</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">curl -vs <span style="color:#2aa198">&#34;https://api.github.com/repos/</span><span style="color:#2aa198">${</span><span style="color:#268bd2">owner</span><span style="color:#2aa198">}</span><span style="color:#2aa198">/</span><span style="color:#2aa198">${</span><span style="color:#268bd2">repo</span><span style="color:#2aa198">}</span><span style="color:#2aa198">/dispatches&#34;</span> <span style="color:#cb4b16">\
</span><span style="color:#cb4b16"></span>  -H <span style="color:#2aa198">&#34;content-type: applicatin/json&#34;</span> -H <span style="color:#2aa198">&#34;accept: application/vnd.github.v3+json&#34;</span> <span style="color:#cb4b16">\
</span><span style="color:#cb4b16"></span>  -H <span style="color:#2aa198">&#34;authorization: bearer </span><span style="color:#2aa198">${</span><span style="color:#268bd2">GITHUB_TOKEN</span><span style="color:#2aa198">}</span><span style="color:#2aa198">&#34;</span> <span style="color:#cb4b16">\
</span><span style="color:#cb4b16"></span>  -d <span style="color:#2aa198">&#39;{&#34;event_type&#34;: &#34;update-readme&#34;,&#34;client_payload&#34;:{&#34;postsCount&#34;: 10}}&#39;</span>
</code></pre></div><hr>
<div class="feature">
<p>Caso queira ver o fonte como um todo, ou mais exemplos de <code>workflow</code>, eu usei o
fonte presente nesses repositórios:</p>
<ul>
<li><a href="https://github.com/lucassabreu/github-actions-examples">lucassabreu/github-actions-examples</a></li>
<li><a href="https://github.com/lucassabreu/lucassabreu/tree/main/.github/workflows">lucassabreu/lucassabreu</a></li>
<li><a href="https://github.com/lucassabreu/lucassabreu.github.io/tree/main/.github/workflows">lucassabreu/lucassabreu.github.io</a></li>
</ul>
</div>
]]></content:encoded></item><item><title>Ambientes por Branch com OpenShift Next Gen usando GitHub</title><link>https://www.lucassabreu.net.br/preview/9/post/ambientes-por-branch-com-openshift-next-gen-usando-github/</link><pubDate>Sun, 07 May 2017 00:00:00 +0000</pubDate><guid>https://www.lucassabreu.net.br/preview/9/post/ambientes-por-branch-com-openshift-next-gen-usando-github/</guid><description>Esta postagem é uma continuação da "Ambientes por Branch com OpenShift Next Gen", implementando o processo no GitHub usando Buddy.Works e o OpenShift da GetUp Cloud</description><image><url>https://www.lucassabreu.net.br/preview/9/feature/post/ambientes-por-branch-com-openshift-next-gen-usando-github/header.png</url></image><content:encoded><![CDATA[<figure class="big">
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="/post/ambientes-por-branch-com-openshift-next-gen-usando-github/header.png"
		
			width="1000" height="328"
		
	/>
	
</figure>

<p><i>Esta postagem é uma continuação da <a href="/post/ambientes-por-branch-com-openshift-next-gen"><strong>Ambientes por Branch com OpenShift Next Gen</strong></a>, a introdução do problema esta lá e também mostro como implementar o processo de deploy usando o GitLab nele, se não viu da uma conferida, vale o investimento* 😉.</i></p>
<p>Como prometi na outra postagem, vamos criar um processo de deploy de ambientes por branch usando o <a href="https://medium.com/@github">GitHub</a>.</p>
<p>No caso do GitHub, ele cobre &ldquo;apenas&rdquo; a parte de repositório de fontes, ele em si não tem integração direta com o Kubernetes/OpenShift, mas possui uma grande gama de opções no que diz respeito de ferramentas de CI e CD.</p>
<p>A implementação que vou demonstrar usará o <a href="https://medium.com/@BuddyWorks">Buddy</a>, mas pode ser replicada para qualquer outro CI, com dificuldade semelhante. Para o registro de imagens irei usar o <a href="http://hub.docker.com">Docker Hub</a> e novamente o OpenShift da <a href="https://medium.com/@getupcloud">Getup Cloud</a>.</p>
<p>Sobre uma introdução ao Kubernetes/OpenShift pode ver aqui:</p>
<p><a href="/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-1/"><strong>Um ambiente simples usando Kubernetes e OpenShift Next Gen — Parte 1</strong></a></p>
<p>O cliente de linha de comando do OpenShift pode ser baixado em:</p>
<p><a href="https://github.com/openshift/origin/releases"><strong>openshift/origin</strong> origin - Enterprise Kubernetes for Developers</a></p>
<hr>
<p>O que queremos montar é um ambiente por branch/PR que deve ser facilmente criado e destruído. Para demonstrar criei um repositório no GitHub com uma aplicação bem simples que apenas retorna uma página estática, mas é o suficiente para o objetivo.</p>


	

<figure >
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="/post/ambientes-por-branch-com-openshift-next-gen-usando-github/helloworld.png"
		
			width="638" height="365"
		
	/>
	
		<figcaption><p>retorno do serviço helloworld</p></figcaption>
	
</figure>

<p>E configurei o Buddy para construir uma imagem com base nesse repositório e publicar ela como <a href="https://hub.docker.com/r/lucassabreu/k8s-pr-envs/">lucassabreu/k8s-pr-envs</a> no Docker Hub.</p>
<p>Nesse momento o arquivo <code>buddy.yml</code> esta assim:</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#268bd2">pipeline</span>: <span style="color:#2aa198">&#34;Build&#34;</span>
  <span style="color:#268bd2">trigger_mode</span>: <span style="color:#2aa198">&#34;ON_EVERY_PUSH&#34;</span>
  <span style="color:#268bd2">ref_name</span>: <span style="color:#2aa198">&#34;master&#34;</span>
  <span style="color:#268bd2">actions</span>:
  - <span style="color:#268bd2">action</span>: <span style="color:#2aa198">&#34;Build Docker image&#34;</span>
    <span style="color:#268bd2">type</span>: <span style="color:#2aa198">&#34;DOCKERFILE&#34;</span>
    <span style="color:#268bd2">login</span>: <span style="color:#2aa198">&#34;${DOCKER_HUB_USER}&#34;</span>
    <span style="color:#268bd2">password</span>: <span style="color:#2aa198">&#34;${DOCKER_HUB_PASSWORD}&#34;</span>
    <span style="color:#268bd2">docker_image_tag</span>: <span style="color:#2aa198">&#34;${execution.to_revision.revision}&#34;</span>
    <span style="color:#268bd2">dockerfile_path</span>: <span style="color:#2aa198">&#34;Dockerfile&#34;</span>
    <span style="color:#268bd2">repository</span>: <span style="color:#2aa198">&#34;lucassabreu/k8s-pr-envs&#34;</span>
</code></pre></div><p class="code-legend">buddy.yml</p>
<p>O fonte nesse momento pode ser visto em:</p>
<p><a href="https://github.com/lucassabreu/k8s-pr-envs/tree/v1"><strong>lucassabreu/k8s-pr-envs</strong> v1</a></p>
<hr>
<p>Nesse primeiro momento não possuímos nenhum processo de deploy, seja de teste, produção ou por branch.</p>
<p>Então vamos adicionar um processo de deploy no OpenShift para o ambiente de produção e testes, sendo que o ambiente de testes é atualizado automaticamente para os commits na master e o de produção apenas quando um usuário disparar o deploy via interface web do Buddy (<a href="http://app.buddy.works/">http://app.buddy.works/</a>).</p>
<p>Precisamos preparar o OpenShift para montar esse processo, primeiramente criamos um <strong>Namespace</strong>. A forma como criamos um varia de vendor para vendor, no caso do OpenShift da <a href="https://medium.com/@getupcloud">Getup Cloud</a>, basta ir em <a href="https://portal.getupcloud.com/projects">https://portal.getupcloud.com/projects</a> e criar um novo projeto, o nome do projeto será o <strong>Namespace.</strong></p>


	

<figure class="big">
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="/post/ambientes-por-branch-com-openshift-next-gen-usando-github/getup-dashboard.png"
		
			width="800" height="286"
		
	/>
	
</figure>

<p>Tendo um <strong>Namespace</strong> precisamos de uma forma do Buddy se autenticar contra o OpenShift, para isso podemos criar um ServiceAccount e usar o <strong>Token</strong> do mesmo para isso. O script abaixo mostra como criar uma ServiceAccount e resgatar o <strong>Token</strong> usando o CLI do OpenShift:</p>
<pre>
<b>$ oc login https://api.getupcloud.com:443</b>
Authentication required for https://api.getupcloud.com:443 ...
Username: lucas.s.abreu@gmail.com
Password:
Login successful.
...

<b>$ oc project github-k8s-pr-envs #usar o seu projeto</b>
Now using project "github-k8s-pr-envs" on server ...

<b>$ oc create serviceaccount github</b>
serviceaccount "github" created

<b>$ oc policy add-role-to-user admin \
    system:serviceaccount:github-k8s-pr-envs:github</b>

<b>$ oc describe serviceaccount github</b>
Name:  github
Namespace: github-k8s-pr-envs
Labels:  <none>

Image pull secrets: github-dockercfg-vat7r

Mountable secrets:  github-token-d3u3t
                    github-dockercfg-vat7r

Tokens:             github-token-2pimz
                    github-token-d3u3t

<b>$ oc describe secret github-token-d3u3t</b>
Name:  github-token-d3u3t
Namespace: github-k8s-pr-envs
Labels:  <none>
Annotations: kubernetes.io/service-account.name=github
  kubernetes.io/service-account.uid=zzz

Type: kubernetes.io/service-account-token

Data
====
ca.crt:  1066 bytes
namespace: 18 bytes
service-ca.crt: 2182 bytes
token:  <i>token-do-openshift-que-estou-ocultando</i>
</pre>
<p>Agora podemos informar no Buddy algumas variáveis para ele disponibilizar para nós depois. Meu painel ficou como abaixo:</p>


	

<figure >
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="/post/ambientes-por-branch-com-openshift-next-gen-usando-github/buddy-envs.png"
		
			width="800" height="336"
		
	/>
	
		<figcaption><p>buddy environments</p></figcaption>
	
</figure>

<p>A URL da API e o domínio que o OpenShift irá utilizar também dependem do seu vendor, no meu caso a API está em <code>https://api.getupcould.com:443</code> e o domínio base é <code>getup.io</code>.</p>
<p>Agora podemos criar os novos pipelines no Buddy. No <code>buddy.yml</code> as linhas abaixo:</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#268bd2">pipeline</span>: <span style="color:#2aa198">&#34;Deploy Staging&#34;</span>
  <span style="color:#268bd2">trigger_mode</span>: <span style="color:#2aa198">&#34;ON_EVERY_PUSH&#34;</span>
  <span style="color:#268bd2">ref_name</span>: <span style="color:#2aa198">&#34;master&#34;</span>
  <span style="color:#268bd2">actions</span>:
  - <span style="color:#268bd2">action</span>: <span style="color:#2aa198">&#34;Deploy Master to Staging&#34;</span>
    <span style="color:#268bd2">type</span>: <span style="color:#2aa198">&#34;BUILD&#34;</span>
    <span style="color:#268bd2">docker_image_name</span>: <span style="color:#2aa198">&#34;lucassabreu/openshift-k8s-cli&#34;</span>
    <span style="color:#268bd2">docker_image_tag</span>: <span style="color:#2aa198">&#34;latest&#34;</span>
    <span style="color:#268bd2">execute_commands</span>:
    - TAG=&#34;${execution.to_revision.revision}&#34;
      ENV=staging
      OPENSHIFT_NAMESPACE=&#34;${OPENSHIFT_NAMESPACE}&#34;
      OPENSHIFT_API_URL=&#34;${OPENSHIFT_API_URL}&#34;
      OPENSHIFT_TOKEN=&#34;${OPENSHIFT_TOKEN}&#34;
      OPENSHIFT_DOMAIN=&#34;${OPENSHIFT_DOMAIN}&#34;
      ./k8s/deploy
- <span style="color:#268bd2">pipeline</span>: <span style="color:#2aa198">&#34;Deploy Production&#34;</span>
  <span style="color:#268bd2">trigger_mode</span>: <span style="color:#2aa198">&#34;MANUAL&#34;</span>
  <span style="color:#268bd2">ref_name</span>: <span style="color:#2aa198">&#34;master&#34;</span>
  <span style="color:#268bd2">actions</span>:
  - <span style="color:#268bd2">action</span>: <span style="color:#2aa198">&#34;Deploy Master to Production&#34;</span>
    <span style="color:#268bd2">type</span>: <span style="color:#2aa198">&#34;BUILD&#34;</span>
    <span style="color:#268bd2">docker_image_name</span>: <span style="color:#2aa198">&#34;lucassabreu/openshift-k8s-cli&#34;</span>
    <span style="color:#268bd2">docker_image_tag</span>: <span style="color:#2aa198">&#34;latest&#34;</span>
    <span style="color:#268bd2">execute_commands</span>:
    - TAG=&#34;${execution.to_revision.revision}&#34;
      ENV=production
      OPENSHIFT_NAMESPACE=&#34;${OPENSHIFT_NAMESPACE}&#34;
      OPENSHIFT_API_URL=&#34;${OPENSHIFT_API_URL}&#34;
      OPENSHIFT_TOKEN=&#34;${OPENSHIFT_TOKEN}&#34;
      OPENSHIFT_DOMAIN=&#34;${OPENSHIFT_DOMAIN}&#34;
      ./k8s/deploy
</code></pre></div><p class="code-legend">buddy.yml (v2)</p>
<p>Basicamente criei duas novas pipelines, uma chamada <code>Deploy Staging</code> e outra <code>Deploy Production</code> as únicas diferenças entre elas é que a <code>Deploy Staging</code> é automática para todo o commit na master e usa <code>ENV=staging</code> para indicar o ambiente; e <code>Deploy Production</code> é manual e usa <code>ENV=production</code>. Também criei variáveis para injetar os valores que informamos antes no Buddy e uma extra <code>COMMIT</code> para que ele consiga identificar qual imagem deve usar.</p>
<p>Essas duas pipelines basicamente chamam o script abaixo:</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#719e07">#!/bin/bash
</span><span style="color:#719e07"></span>
<span style="color:#b58900">echo</span> <span style="color:#2aa198">&#34;&gt;&gt; Connecting to OpenShift...&#34;</span>
oc login <span style="color:#2aa198">&#34;</span><span style="color:#268bd2">$OPENSHIFT_API_URL</span><span style="color:#2aa198">&#34;</span> --token <span style="color:#2aa198">&#34;</span><span style="color:#268bd2">$OPENSHIFT_TOKEN</span><span style="color:#2aa198">&#34;</span>
oc project <span style="color:#2aa198">&#34;</span><span style="color:#268bd2">$OPENSHIFT_NAMESPACE</span><span style="color:#2aa198">&#34;</span>

<span style="color:#b58900">echo</span> <span style="color:#2aa198">&#34;&gt;&gt; Removing old application...&#34;</span>
oc delete all -l <span style="color:#2aa198">&#34;app=</span><span style="color:#268bd2">$ENV</span><span style="color:#2aa198">&#34;</span>

<span style="color:#268bd2">IMAGE_TAG</span><span style="color:#719e07">=</span><span style="color:#2aa198">&#34;lucassabreu/k8s-pr-envs:</span><span style="color:#268bd2">$TAG</span><span style="color:#2aa198">&#34;</span>
<span style="color:#268bd2">HOSTNAME</span><span style="color:#719e07">=</span><span style="color:#2aa198">&#34;</span><span style="color:#268bd2">$OPENSHIFT_NAMESPACE</span><span style="color:#2aa198">-</span><span style="color:#268bd2">$ENV</span><span style="color:#2aa198">.</span><span style="color:#268bd2">$OPENSHIFT_DOMAIN</span><span style="color:#2aa198">&#34;</span>

<span style="color:#719e07">if</span> <span style="color:#719e07">[</span> <span style="color:#2aa198">&#34;</span><span style="color:#268bd2">$ENV</span><span style="color:#2aa198">&#34;</span> <span style="color:#719e07">=</span> <span style="color:#2aa198">&#34;production&#34;</span> <span style="color:#719e07">]</span>; <span style="color:#719e07">then</span>
    <span style="color:#268bd2">HOSTNAME</span><span style="color:#719e07">=</span><span style="color:#268bd2">$OPENSHIFT_NAMESPACE</span>.<span style="color:#268bd2">$OPENSHIFT_DOMAIN</span>
<span style="color:#719e07">fi</span>

<span style="color:#b58900">echo</span> <span style="color:#2aa198">&#34;&gt;&gt; Deploying application...&#34;</span>
sed <span style="color:#2aa198">&#34;
</span><span style="color:#2aa198">    s|__ENV__|</span><span style="color:#268bd2">$ENV</span><span style="color:#2aa198">|;
</span><span style="color:#2aa198">    s|__IMAGE_TAG__|</span><span style="color:#268bd2">$IMAGE_TAG</span><span style="color:#2aa198">|;
</span><span style="color:#2aa198">    s|__HOSTNAME__|</span><span style="color:#268bd2">$HOSTNAME</span><span style="color:#2aa198">|;
</span><span style="color:#2aa198">    &#34;</span> k8s/full.yml | oc apply -f -

<span style="color:#b58900">echo</span> <span style="color:#2aa198">&#34;Enviroment </span><span style="color:#268bd2">$ENV</span><span style="color:#2aa198"> deployed to: http://</span><span style="color:#268bd2">$HOSTNAME</span><span style="color:#2aa198">/&#34;</span>
</code></pre></div><p class="code-legend">k8s/deploy</p>
<p>Este script basicamente se autentica contra a API do OpenShift usando o Token que criamos antes, destrói a aplicação antiga e executa o deploy
de uma nova.</p>
<p>Para poder identificar quais os componentes de cada ambiente estou marcando eles com a label <code>app=$ENV</code>, dessa forma todos os componentes do ambiente <code>staging</code> estão marcados com <code>app=staging</code> e fica fácil eliminá-los e identificá-los.</p>
<p>É importante ressaltar que estou usando uma imagem customizada para rodar esses comandos (<code>lucassabreu/openshift-k8s-cli</code>) que basicamente é um <code>ubuntu</code> com o <code>oc</code> instalado dentro dela.</p>
<p>Também estou usando um truque de &ldquo;<em>templating</em>&rdquo; com o YAML que define os ambientes para poder inserir as variáveis de cada ambiente nele. Existem outras ferramentas mais avançadas como o <a href="https://github.com/kubernetes/helm">Helm</a>, mas para o meu exemplo templating com <code>sed</code> é o suficiente.</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#268bd2">apiVersion</span>: extensions/v1beta1
<span style="color:#268bd2">kind</span>: Deployment
<span style="color:#268bd2">metadata</span>:
  <span style="color:#268bd2">name</span>: hw-dpl-__ENV__
  <span style="color:#268bd2">labels</span>:
    <span style="color:#268bd2">app</span>: __ENV__
<span style="color:#268bd2">spec</span>:
  <span style="color:#268bd2">replicas</span>: <span style="color:#2aa198">1</span>
  <span style="color:#268bd2">template</span>:
    <span style="color:#268bd2">metadata</span>:
      <span style="color:#268bd2">labels</span>:
        <span style="color:#268bd2">app</span>: __ENV__
        <span style="color:#268bd2">name</span>: hw-pod
    <span style="color:#268bd2">spec</span>:
      <span style="color:#268bd2">containers</span>:
      - <span style="color:#268bd2">name</span>: hw-container
        <span style="color:#268bd2">image</span>: __IMAGE_TAG__
        <span style="color:#268bd2">imagePullPolicy</span>: Always
        <span style="color:#268bd2">ports</span>:
        - <span style="color:#268bd2">name</span>: web-port
          <span style="color:#268bd2">containerPort</span>: <span style="color:#2aa198">8080</span>
---
<span style="color:#268bd2">apiVersion</span>: <span style="color:#2aa198">&#34;v1&#34;</span>
<span style="color:#268bd2">kind</span>: Service
<span style="color:#268bd2">metadata</span>:
  <span style="color:#268bd2">name</span>: hw-src-__ENV__
  <span style="color:#268bd2">labels</span>:
    <span style="color:#268bd2">app</span>: __ENV__
<span style="color:#268bd2">spec</span>:
  <span style="color:#268bd2">ports</span>:
    - <span style="color:#268bd2">port</span>: <span style="color:#2aa198">80</span>
      <span style="color:#268bd2">targetPort</span>: <span style="color:#2aa198">&#34;web-port&#34;</span>
      <span style="color:#268bd2">protocol</span>: TCP
  <span style="color:#268bd2">selector</span>:
    <span style="color:#268bd2">name</span>: hw-pod
    <span style="color:#268bd2">app</span>: __ENV__
---
<span style="color:#268bd2">apiVersion</span>: v1
<span style="color:#268bd2">kind</span>: Route
<span style="color:#268bd2">metadata</span>:
  <span style="color:#268bd2">name</span>: __ENV__
  <span style="color:#268bd2">labels</span>:
    <span style="color:#268bd2">app</span>: __ENV__
<span style="color:#268bd2">spec</span>:
  <span style="color:#268bd2">host</span>: __HOSTNAME__
  <span style="color:#268bd2">to</span>:
    <span style="color:#268bd2">kind</span>: Service
    <span style="color:#268bd2">name</span>: hw-src-__ENV__
</code></pre></div><p class="code-legend">k8s/full.yml</p>
<p>Agora toda vez que é feito commit na master o ambiente de <em>staging</em> é automaticamente atualizado, e ficou bem simples atualizar o ambiente <em>production</em>.</p>
<p>Fonte até agora:</p>
<p><a href="https://github.com/lucassabreu/k8s-pr-envs/tree/v2"><strong>lucassabreu/k8s-pr-envs</strong> v2</a></p>
<hr>
<p>Agora que temos um processo de <em>build</em> e um de <em>deploy automatizado</em>, vamos adicionar a função de deploy por branch.</p>
<p>Basicamente precisamos de duas novas etapas no nosso CI, uma para subir o ambiente para uma branch e outro para destruir esse ambiente.</p>
<p>Primeiro vamos preparar o deploy por branch, para isso adicionei as seguintes linhas do <code>buddy.yml</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#268bd2">pipeline</span>: <span style="color:#2aa198">&#34;Review&#34;</span>
  <span style="color:#268bd2">trigger_mode</span>: <span style="color:#2aa198">&#34;ON_EVERY_PUSH&#34;</span>
  <span style="color:#268bd2">ref_name</span>: <span style="color:#2aa198">&#34;((?!master).*)&#34;</span>
  <span style="color:#268bd2">actions</span>:
  - <span style="color:#268bd2">action</span>: <span style="color:#2aa198">&#34;Build Docker image&#34;</span>
    <span style="color:#268bd2">type</span>: <span style="color:#2aa198">&#34;DOCKERFILE&#34;</span>
    <span style="color:#268bd2">login</span>: <span style="color:#2aa198">&#34;${DOCKER_HUB_USER}&#34;</span>
    <span style="color:#268bd2">password</span>: <span style="color:#2aa198">&#34;${DOCKER_HUB_PASSWORD}&#34;</span>
    <span style="color:#268bd2">docker_image_tag</span>: <span style="color:#2aa198">&#34;${execution.branch.name}&#34;</span>
    <span style="color:#268bd2">dockerfile_path</span>: <span style="color:#2aa198">&#34;Dockerfile&#34;</span>
    <span style="color:#268bd2">repository</span>: <span style="color:#2aa198">&#34;lucassabreu/k8s-pr-envs&#34;</span>
  - <span style="color:#268bd2">action</span>: <span style="color:#2aa198">&#34;Deploy By Branch&#34;</span>
    <span style="color:#268bd2">type</span>: <span style="color:#2aa198">&#34;BUILD&#34;</span>
    <span style="color:#268bd2">docker_image_name</span>: <span style="color:#2aa198">&#34;lucassabreu/openshift-k8s-cli&#34;</span>
    <span style="color:#268bd2">docker_image_tag</span>: <span style="color:#2aa198">&#34;latest&#34;</span>
    <span style="color:#268bd2">execute_commands</span>:
    - TAG=&#34;${execution.branch.name}&#34;
      ENV=&#34;${execution.branch.name}&#34;
      GITHUB_TOKEN=&#34;${GITHUB_TOKEN}&#34;
      LOG_URL=&#34;${execution.html_url}&#34;
      OPENSHIFT_NAMESPACE=&#34;${OPENSHIFT_NAMESPACE}&#34;
      OPENSHIFT_API_URL=&#34;${OPENSHIFT_API_URL}&#34;
      OPENSHIFT_TOKEN=&#34;${OPENSHIFT_TOKEN}&#34;
      OPENSHIFT_DOMAIN=&#34;${OPENSHIFT_DOMAIN}&#34;
      ./k8s/deploy
</code></pre></div><p>No novo pipeline <em>Review</em> temos um <em>build</em> da imagem e um deploy de um ambiente para a branch em questão, para uma rota própria.</p>
<p>Eu acabei juntando essas duas ações, pois o build que roda na master vai versionando as imagens por commit, que é uma prática comum e que ajudaria a fazer o deploy para produção mais simples, porém branchs de desenvolvimento tendem a ser mais caóticas e iriam poluir muito o registro de imagens (se usar o do AWS seria um custo maior também), então preferi manter uma imagem por branch, até para não confundir também.</p>
<p>Se eu criar uma nova branch nesse momento, o Buddy automaticamente irá montar uma imagem para ela e inseri-la no OpenShift, se o nome da branch for <code>a-change</code> o nome do ambiente <a href="http://github-k8s-pr-envs-a-change.getup.io">http://github-k8s-pr-envs-a-change.getup.io</a> (talvez ainda esteja acessível).</p>
<p>Eu sei disso porque eu escrevi o script, eu poderia documentar isso no projeto para todos saberem como descobrir as URLs corretas, mas é mais do que natural esperar erros por esse caminho, um &ldquo;o&rdquo; que vira &ldquo;a&rdquo; na hora de digitar, um nome de branch estranho, etc.</p>
<p>Dessa forma fica difícil para a equipe de QA acessar aos ambientes por branch toda a vez correndo o risco de errar. Então fiz algumas alterações no <code>k8s/deploy</code> para utilizar a <a href="https://developer.github.com/v3/repos/deployments/">API de Deployments do GitHub</a> para registrar as URLs diretamente nos commits.</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-shell" data-lang="shell"><span style="color:#719e07">if</span> <span style="color:#719e07">[</span> ! -z <span style="color:#268bd2">$GITHUB_TOKEN</span> <span style="color:#719e07">]</span> <span style="color:#719e07">&amp;&amp;</span> <span style="color:#719e07">[</span> <span style="color:#2aa198">&#34;</span><span style="color:#268bd2">$ENV</span><span style="color:#2aa198">&#34;</span> !<span style="color:#719e07">=</span> <span style="color:#2aa198">&#34;production&#34;</span> <span style="color:#719e07">]</span> <span style="color:#719e07">&amp;&amp;</span> <span style="color:#719e07">[</span> <span style="color:#2aa198">&#34;</span><span style="color:#268bd2">$ENV</span><span style="color:#2aa198">&#34;</span> !<span style="color:#719e07">=</span> <span style="color:#2aa198">&#34;staging&#34;</span> <span style="color:#719e07">]</span>; <span style="color:#719e07">then</span>
    <span style="color:#b58900">echo</span> <span style="color:#2aa198">&#34;&gt;&gt; Registering </span><span style="color:#268bd2">$ENV</span><span style="color:#2aa198"> deployment...&#34;</span>

    <span style="color:#268bd2">ID_DEPLOYMENT</span><span style="color:#719e07">=</span><span style="color:#719e07">$(</span>k8s/github-deployment <span style="color:#2aa198">&#34;lucassabreu/k8s-pr-envs&#34;</span> <span style="color:#2aa198">&#34;</span><span style="color:#268bd2">$GITHUB_TOKEN</span><span style="color:#2aa198">&#34;</span> create <span style="color:#cb4b16">\
</span><span style="color:#cb4b16"></span>        <span style="color:#2aa198">&#34;</span><span style="color:#268bd2">$ENV</span><span style="color:#2aa198">&#34;</span> <span style="color:#2aa198">&#34;</span><span style="color:#268bd2">$ENV</span><span style="color:#2aa198">&#34;</span> <span style="color:#b58900">true</span> | jq <span style="color:#2aa198">&#34;.id&#34;</span><span style="color:#719e07">)</span>
    <span style="color:#268bd2">RETURN</span><span style="color:#719e07">=</span><span style="color:#719e07">$(</span>k8s/github-deployment <span style="color:#2aa198">&#34;lucassabreu/k8s-pr-envs&#34;</span> <span style="color:#2aa198">&#34;</span><span style="color:#268bd2">$GITHUB_TOKEN</span><span style="color:#2aa198">&#34;</span> status <span style="color:#b58900">set</span> <span style="color:#cb4b16">\
</span><span style="color:#cb4b16"></span>        <span style="color:#2aa198">&#34;</span><span style="color:#268bd2">$ID_DEPLOYMENT</span><span style="color:#2aa198">&#34;</span> success <span style="color:#2aa198">&#34;http://</span><span style="color:#268bd2">$HOSTNAME</span><span style="color:#2aa198">/&#34;</span> <span style="color:#2aa198">&#34;</span><span style="color:#268bd2">$LOG_URL</span><span style="color:#2aa198">&#34;</span><span style="color:#719e07">)</span>
    <span style="color:#719e07">if</span> <span style="color:#719e07">[</span> <span style="color:#2aa198">&#34;</span><span style="color:#719e07">$(</span><span style="color:#b58900">echo</span> <span style="color:#268bd2">$RETURN</span> | jq <span style="color:#2aa198">&#34;.message&#34;</span><span style="color:#719e07">)</span><span style="color:#2aa198">&#34;</span> !<span style="color:#719e07">=</span> <span style="color:#2aa198">&#34;null&#34;</span> <span style="color:#719e07">]</span>; <span style="color:#719e07">then</span>
        <span style="color:#b58900">echo</span> <span style="color:#268bd2">$RETURN</span>
        <span style="color:#b58900">exit</span> <span style="color:#2aa198">1</span>
    <span style="color:#719e07">fi</span>
<span style="color:#719e07">fi</span>

<span style="color:#b58900">echo</span> <span style="color:#2aa198">&#34;Enviroment </span><span style="color:#268bd2">$ENV</span><span style="color:#2aa198"> deployed to: http://</span><span style="color:#268bd2">$HOSTNAME</span><span style="color:#2aa198">/&#34;</span>
</code></pre></div><p class="code-legend">deploy.sh</p>
<p>Com isso faço algumas chamadas a API do GitHub usando o <code>k8s/github-deployment</code> (que é basicamente um facilitador para a API) e consigo registrar o deploy no GitHub.</p>
<p>O Pull Request da branch <code>a-change</code> fica assim:</p>


	

<figure >
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="/post/ambientes-por-branch-com-openshift-next-gen-usando-github/github-deployments.png"
		
			width="800" height="571"
		
	/>
	
</figure>

<p>Nesse botão &ldquo;View deployment&rdquo; está o link para a rota que criamos no deploy, e dessa forma fica extremamente fácil para a equipe de QA acessar os ambientes.</p>
<p>Fontes até agora:</p>
<p><a href="https://github.com/lucassabreu/k8s-pr-envs/tree/v3.1"><strong>lucassabreu/k8s-pr-envs</strong> v3.1</a></p>
<hr>
<p>Ainda fica faltando uma última atividade por realizar, que é destruir o ambiente da branch quando os Testers não mais precisarem deles.</p>
<p>Então vamos adicionar uma nova pipeline no <code>buddy.yml</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#268bd2">pipeline</span>: <span style="color:#2aa198">&#34;Close Review&#34;</span>
  <span style="color:#268bd2">trigger_mode</span>: <span style="color:#2aa198">&#34;MANUAL&#34;</span>
  <span style="color:#268bd2">ref_name</span>: <span style="color:#2aa198">&#34;((?!master).*)&#34;</span>
  <span style="color:#268bd2">actions</span>:
  - <span style="color:#268bd2">action</span>: <span style="color:#2aa198">&#34;Destroy Branch Environment&#34;</span>
    <span style="color:#268bd2">type</span>: <span style="color:#2aa198">&#34;BUILD&#34;</span>
    <span style="color:#268bd2">docker_image_name</span>: <span style="color:#2aa198">&#34;lucassabreu/openshift-k8s-cli&#34;</span>
    <span style="color:#268bd2">docker_image_tag</span>: <span style="color:#2aa198">&#34;latest&#34;</span>
    <span style="color:#268bd2">execute_commands</span>:
    - ENV=&#34;${execution.branch.name}&#34;
      GITHUB_TOKEN=&#34;${GITHUB_TOKEN}&#34;
      OPENSHIFT_NAMESPACE=&#34;${OPENSHIFT_NAMESPACE}&#34;
      OPENSHIFT_API_URL=&#34;${OPENSHIFT_API_URL}&#34;
      OPENSHIFT_TOKEN=&#34;${OPENSHIFT_TOKEN}&#34;
      ./k8s/destroy
</code></pre></div><p>Nesse pipeline manual basicamente chamamos o script <code>k8s/destroy</code> (que esta abaixo) que simplesmente destrói o ambiente inativa ele no GitHub.</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#719e07">#!/bin/bash
</span><span style="color:#719e07"></span>
<span style="color:#b58900">echo</span> <span style="color:#2aa198">&#34;&gt;&gt; Connecting to OpenShift...&#34;</span>
oc login <span style="color:#2aa198">&#34;</span><span style="color:#268bd2">$OPENSHIFT_API_URL</span><span style="color:#2aa198">&#34;</span> --token <span style="color:#2aa198">&#34;</span><span style="color:#268bd2">$OPENSHIFT_TOKEN</span><span style="color:#2aa198">&#34;</span>
oc project <span style="color:#2aa198">&#34;</span><span style="color:#268bd2">$OPENSHIFT_NAMESPACE</span><span style="color:#2aa198">&#34;</span>

<span style="color:#b58900">echo</span> <span style="color:#2aa198">&#34;&gt;&gt; Removing old application...&#34;</span>
oc delete all -l <span style="color:#2aa198">&#34;app=</span><span style="color:#268bd2">$ENV</span><span style="color:#2aa198">&#34;</span>

k8s/github-deployment <span style="color:#2aa198">&#34;lucassabreu/k8s-pr-envs&#34;</span> <span style="color:#2aa198">&#34;</span><span style="color:#268bd2">$GITHUB_TOKEN</span><span style="color:#2aa198">&#34;</span> inactive <span style="color:#2aa198">&#34;</span><span style="color:#268bd2">$ENV</span><span style="color:#2aa198">&#34;</span> &gt;&gt; /dev/null
</code></pre></div><p>Agora podemos chamar ele para eliminar os ambientes de branch em aberto.</p>
<p>Fontes até o momento:</p>
<p><a href="https://github.com/lucassabreu/k8s-pr-envs/tree/v4"><strong>lucassabreu/k8s-pr-envs</strong> v4</a></p>
<hr>
<p>Um comportamento que ainda não conseguimos reproduzir usando o Buddy e GitHub é destruir os ambientes quando o Pull Request é finalizado.</p>
<p>Para resolver esse problema podemos adicionar um webhook no GitHub e dispararmos o pipeline através desse webhook. Isso pode ser feito de várias formas, usando Lambda Functions ou um endpoint para esse fim.</p>
<p>No caso criei um novo Pod com um contêiner que criei (<code>lucassabreu/buddy-works-pullrequest-webhook</code>) e associei ela no meu projeto no GitHub.</p>


	

<figure class="big">
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="/post/ambientes-por-branch-com-openshift-next-gen-usando-github/webhooks.png"
		
			width="1000" height="296"
		
	/>
	
</figure>

<p>E pronto tenho um processo completo, mesmo que se esqueçam de derrubar o ambiente no momento que o merge acontecer automaticamente o ambiente
será destruído.</p>
<hr>
<p>Abaixo esta o meu &ldquo;webhook&rdquo; caso opte por um caminho semelhante e poder
ter uma base de como é a chamada.</p>
<p><a href="https://github.com/lucassabreu/buddy-works-pullrequest-webhook"><strong>lucassabreu/buddy-works-pullrequest-webhook</strong></a></p>
<hr>
<p>Foi mais complexo implementar a integração do OpenShift com o GitHub, mas ainda sim temos um grande ecossistema de integrações que nos permitem contornar essa questão, e o resultado continua sendo o esperado.</p>]]></content:encoded></item><item><title>Ambientes por Branch com OpenShift Next Gen</title><link>https://www.lucassabreu.net.br/preview/9/post/ambientes-por-branch-com-openshift-next-gen/</link><pubDate>Mon, 01 May 2017 00:00:00 +0000</pubDate><guid>https://www.lucassabreu.net.br/preview/9/post/ambientes-por-branch-com-openshift-next-gen/</guid><description>Como melhorar o processo de Pull Request usando deploys por branch usando OpenShift Next Gen e Continuous Integration</description><image><url>https://www.lucassabreu.net.br/preview/9/feature/post/ambientes-por-branch-com-openshift-next-gen/header.png</url></image><content:encoded><![CDATA[<figure class="big">
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="/post/ambientes-por-branch-com-openshift-next-gen/header.png"
		
			width="1000" height="328"
		
	/>
	
</figure>

<p>Hoje na <a href="https://blog.coderockr.com">Coderockr</a> utilizamos <a href="https://blog.coderockr.com/a-import%C3%A2ncia-da-revis%C3%A3o-de-c%C3%B3digo-a1a8b41ed7ff">Pull Requests e Code Reviews</a> como uma ferramenta de qualidade nos nossos desenvolvimentos, e tem garantido resultados nesse sentido.</p>
<p>Mas mesmo com esse processo eventualmente temos de lidar com alguns problemas como, por exemplo, funções que interferem umas nas outras depois de aprovadas, permitir que os Testers possam avaliar as melhorias, e garantir que todos as mudanças feitas na branch principal podem ser enviadas para produção.</p>
<p>Esses problemas podem ser reduzidos, ou até eliminados; se, mesmo antes de aprovar os PRs; os Testers conseguissem trabalhar sobre essas melhorias e só repassadas para a branch principal após a aprovação deles.</p>
<p>Desse modo o fonte principal não só passou pelo Review de outros desenvolvedores, como foi testado pela equipe de QA, dando ainda mais confiança no mesmo.</p>
<p>Mas subir ambientes de homologação para cada um dos PRs, automaticamente ou sobre demanda, não é um problema trivial, envolve subir máquinas, garantir que esta rodando a versão atualizada, liberar portas, etc.</p>
<p>Uma forma que encontramos para resolver esse problema é utilizando um cluster Kubernetes (ou a versão da Red Hat o OpenShift), pois essas ações são bem simples de realizar com ele e ainda mais fáceis se forem automatizadas.</p>
<p>Agora vou explicar como montar um exemplo simples, um para o GitLab e outro para o GitHub, integrando com o OpenShift da <a href="https://getupcloud.com.br">Getup Cloud</a>.</p>
<p>Sobre uma introdução ao Kubernetes/OpenShift pode ver aqui:</p>
<p><a href="/post/um-ambiente-simples-usando-kubernetes-e-openshift-next-gen-parte-1/"><strong>Um ambiente simples usando Kubernetes e OpenShift Next Gen - Parte 1</strong></a></p>
<p>O cliente de linha de comando pode ser baixado em:</p>
<p><a href="https://github.com/openshift/origin/releases"><strong>openshift/origin</strong> origin - Enterprise Kubernetes for Developers</a></p>
<h4 id="gitlab-integrations-ci-registry-e-environments">
	GitLab: Integrations, CI, Registry e Environments
	
		<a href="#gitlab-integrations-ci-registry-e-environments" class="heading-anchor"
			aria-label="copy link to this section"
			title="Copy link to this section"
			>
			<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 512 512">
				<g>
					<g>
						<g>
							<path d="M480.7,11H130.4c-11.3,0-20.4,9.1-20.4,20.4v60.3H31.5c-11.3,0-20.4,9.1-20.4,20.4v368.5c0,11.3,9.1,20.4,20.4,20.4		 h350.3c11.3,0,20.4-9.1,20.4-20.4v-60.3h78.5c11.3,0,20.4-9.1,20.4-20.4V31.4C501.1,20.1,491.9,11,480.7,11z M361.3,460.2H51.9		 V132.5h309.4V460.2z M460.2,379.5h-58.1V112.1c0-11.3-9.1-20.4-20.4-20.4h-231V51.8h309.4V379.5z"/>
							<path d="m127.8,242.6h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.3 9.1,20.4 20.4,20.4z"/>
							<path d="m127.8,390.9h157.7c11.3,0 20.4-9.1 20.4-20.4 0-11.3-9.1-20.4-20.4-20.4h-157.7c-11.3,0-20.4,9.1-20.4,20.4 0,11.2 9.1,20.4 20.4,20.4z"/>
						</g>
					</g>
				</g>
			</svg>
		</a>
	
</h4>


	

<figure class="big">
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="/post/ambientes-por-branch-com-openshift-next-gen/gitlab.png"
		
			width="800" height="202"
		
	/>
	
</figure>

<p>A primeira experiencia que fizemos foi com o <a href="https://gitlab.com">GitLab</a>, principalmente pela integração que ele traz com o Kubernetes, e as outras ferramentas que ele oferece que acabaram cobrindo todo o escopo do problema.</p>
<p>O que queremos montar é um ambiente por branch/PR que deve ser facilmente criado e destruído. Para demonstrar criei um repositório no GitLab com uma aplicação bem simples que apenas retorna uma página estática, mas é o suficiente para o objetivo.</p>


	

<figure >
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="/post/ambientes-por-branch-com-openshift-next-gen/helloworld-view.png"
		
			width="638" height="365"
		
	/>
	
		<figcaption><p>retorno do serviço helloworld</p></figcaption>
	
</figure>

<p>Primeiramente criei a base da aplicação usando Docker, a mesma gera uma página com o conteúdo acima. O que vale destacar nesse primeiro momento é que já configurei um processo de CI simples:</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#268bd2">build</span>:
  <span style="color:#268bd2">image</span>: docker:latest
  <span style="color:#268bd2">services</span>:
    - docker:dind
  <span style="color:#268bd2">stage</span>: build
  <span style="color:#268bd2">script</span>:
    - docker login -u &#34;gitlab-ci-token&#34; -p &#34;$CI_JOB_TOKEN&#34; $CI_REGISTRY
    - docker build --pull -t &#34;$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME&#34; .
    - docker push &#34;$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME&#34;
    - echo &#34;Pushing image $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME&#34;
  <span style="color:#268bd2">only</span>:
    - branches
</code></pre></div><p class="code-legend">.gitlab-ci.yml</p>
<p>Nesse CI eu construo o contêiner da aplicação para cada commit feito e guardo no registro do próprio GitLab por branch, dessa forma tenho uma versão do meu contêiner para cada uma das branchs que forem criadas e vou atualizando essas versões automaticamente a cada alteração.</p>
<p>Fonte completo até aqui:</p>
<p><a href="https://gitlab.com/lucassabreu/k8s-pr-envs/tree/v1"><strong>Files · v1 · Lucas dos Santos Abreu / k8s-pr-envs</strong></a></p>
<hr>
<p>Nesse momento não tenho nenhum deploy, seja de ambiente de teste, produção ou por branch.</p>
<p>Então vamos adicionar um processo de deploy no OpenShift para o ambiente de produção e testes, sendo que o ambiente de testes é atualizado automaticamente para os commits na master e o de produção apenas quando um usuário disparar o deploy.</p>
<p>Para fazer isso primeiramente temos de configurar a integração entre o OpenShift e o GitLab, para isso vamos em <em>Settings</em> &gt; <em>Integrations</em> e procuramos <em>Kubernetes</em> nas opções. O GitLab irá solicitar algumas informações sobre o ambiente, qual o <strong>Namespace</strong>, o <strong>URL da API</strong> do <strong>Kubernetes</strong> e uma forma de autenticação, que pode ser um <strong>Service Token</strong> ou um <strong>CA Bundle</strong>.</p>
<p>Dessa forma vou criar um novo <strong>Namespace</strong>, como fazer isso vai depender do seu vendor de Kubernetes, no caso da <a href="https://getupcloud.com.br">Getup Cloud</a>, basta ir em <a href="https://portal.getupcloud.com/projects">https://portal.getupcloud.com/projects</a> e criar um novo projeto, o nome do projeto será o <strong>Namespace.</strong></p>


	

<figure class="big">
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="/post/ambientes-por-branch-com-openshift-next-gen/dashboard-getup.png"
		
			width="800" height="282"
		
	/>
	
</figure>

<p>Uma vez com o <strong>Namespace</strong> podemos criar um novo <strong>Service Token</strong> para ser usado no CI do GitLab, no caso para criar um Service Token é necessário criar uma ServiceAccount e dar permissões a mesma, e então pegar o Service Token dela. O script abaixo realiza essas operações:</p>
<pre>
<b>$ oc login https://api.getupcloud.com:443</b>
Authentication required for https://api.getupcloud.com:443 ...
Username: lucas.s.abreu@gmail.com
Password:
Login successful.
...

<b>$ oc project gitlab-k8s-pr-envs #usar o seu projeto</b>
Now using project "gitlab-k8s-pr-envs" on server ...

<b>$ oc create serviceaccount gitlab</b>
serviceaccount "gitlab" created

<b>$ oc policy add-role-to-user admin \</b>
    system:serviceaccount:gitlab-k8s-pr-envs:gitlab

<b>$ oc describe serviceaccount gitlab</b>
Name:  gitlab
Namespace: gitlab-k8s-pr-envs
Labels:  <none>

Image pull secrets: gitlab-dockercfg-qj9o9

Mountable secrets:  gitlab-token-6ael2
                    gitlab-dockercfg-qj9o9

Tokens:             gitlab-token-6ael2
                    gitlab-token-zkk6u

<b>$ oc describe secret gitlab-token-6ael2</b>
Name:  gitlab-token-6ael2
Namespace: gitlab-k8s-pr-envs
Labels:  <none>
Annotations: kubernetes.io/service-account.name=gitlab
  kubernetes.io/service-account.uid=zzz

Type: kubernetes.io/service-account-token

Data
====
ca.crt:  1066 bytes
namespace: 18 bytes
service-ca.crt: 2182 bytes
token:  <i><b>token-do-openshift-que-estou-ocultando</i></b>
</pre>
<p>Agora que temos o token gerado basta adicionar essas informações no
GitLab.</p>


	

<figure class="big">
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="/post/ambientes-por-branch-com-openshift-next-gen/gitlab-k8s-integration.png"
		
			width="750" height="481"
		
	/>
	
</figure>

<p>Você pode confirmar se passou os dados corretos com o botão de teste no GitLab.</p>
<p>Certo, agora o GitLab consegue conversar com o OpenShift. Podemos então alterar nossas regras de CI para criar duas novas etapas: <em>staging</em> e <em>production</em>, que irão realizar o deploy dos nossos ambientes padrões, sendo que <em>staging</em> será disparada automaticamente por commits na master e <em>production</em> ficará como manual.</p>
<p>O .<code>gitlab-ci.yml</code> ficou como abaixo (já usando a integração com OpenShift):</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#268bd2">stages</span>:
  - build
  - staging
  - production

<span style="color:#268bd2">variables</span>:
  <span style="color:#268bd2">KUBE_DOMAIN</span>: getup.io

<span style="color:#268bd2">build</span>:
  <span style="color:#268bd2">stage</span>: build
  <span style="color:#268bd2">image</span>: docker:latest
  <span style="color:#268bd2">services</span>:
    - docker:dind
  <span style="color:#268bd2">script</span>:
    - docker login -u &#34;gitlab-ci-token&#34; -p &#34;$CI_JOB_TOKEN&#34; $CI_REGISTRY
    - docker build --pull -t &#34;$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME&#34; .
    - docker push &#34;$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME&#34;
    - echo &#34;Pushing image $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME&#34;
  <span style="color:#268bd2">only</span>:
    - branches

<span style="color:#268bd2">staging</span>:
  <span style="color:#268bd2">stage</span>: staging
  <span style="color:#268bd2">image</span>: lucassabreu/openshift-k8s-cli:latest
  <span style="color:#268bd2">variables</span>:
    <span style="color:#268bd2">CI_ENVIRONMENT_URL</span>: http://$CI_PROJECT_NAME-staging.$KUBE_DOMAIN
  <span style="color:#268bd2">environment</span>:
    <span style="color:#268bd2">name</span>: staging
    <span style="color:#268bd2">url</span>: http://$CI_PROJECT_NAME-staging.$KUBE_DOMAIN
  <span style="color:#268bd2">script</span>:
    - k8s/deploy
  <span style="color:#268bd2">only</span>:
    - master

<span style="color:#268bd2">production</span>:
  <span style="color:#268bd2">stage</span>: production
  <span style="color:#268bd2">image</span>: lucassabreu/openshift-k8s-cli:latest
  <span style="color:#268bd2">variables</span>:
    <span style="color:#268bd2">CI_ENVIRONMENT_URL</span>: http://$CI_PROJECT_NAME.$KUBE_DOMAIN
  <span style="color:#268bd2">environment</span>:
    <span style="color:#268bd2">name</span>: production
    <span style="color:#268bd2">url</span>: http://$CI_PROJECT_NAME.$KUBE_DOMAIN
  <span style="color:#268bd2">when</span>: manual
  <span style="color:#268bd2">script</span>:
    - k8s/deploy
  <span style="color:#268bd2">only</span>:
    - master
</code></pre></div><p class="code-legend">.gitlab-ci.yml (v2)</p>
<p>As mudança são os novos stages <code>staging</code> e <code>production</code>; as variáveis novas <code>KUBE_DOMAIN</code> e <code>CI_ENVIRONMENT_URL</code>; e o script <code>k8s/deploy</code>. Vamos por partes.</p>
<p>A variável <code>KUBE_DOMAIN</code> vai ajudar a deixar o nosso processo de deploy mais simples, basicamente nós colocamos nela o domínio base que o OpenShift usa para expor as rotas dele, no caso da Getup seria &ldquo;<em>getup.io</em>&rdquo;. A <code>CI_ENVIRONMENT_URL</code> é completar a <code>KUBE_DOMAIN</code> e serve para informar o <code>k8s/deploy</code> qual endereço ele deve expor o ambiente, ele deve sempre terminar com o <code>KUBE_DOMAIN</code> e deve ser igual a <code>url</code> da chave <code>environment</code>, pois é por essa chave que o GitLab sabe onde os ambientes estão expostos.</p>
<p>As etapas de <code>staging</code> e <code>production</code> irão fazer o deploy dos nossos ambientes e como comentei antes o ambiente de <em>staging</em> terá deploy automático para todo commit na master, enquanto <em>production</em> irá esperar uma ação do usuário. No mais as duas etapas são iguais mudando apenas a URL que estão sendo expostas. Estou usando a imagem <code>lucassabreu/openshift-k8s-cli</code> que é basicamente um <code>ubuntu</code> com o <code>oc</code> instalado.</p>
<p>O script <code>k8s/deploy</code> está abaixo e ele basicamente se autentica contra a API do OpenShift usando o <em>Service Token</em> que criamos antes, destrói a aplicação antiga e executa o deploy de uma nova.</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#719e07">#!/bin/bash
</span><span style="color:#719e07"></span>
oc login <span style="color:#2aa198">&#34;</span><span style="color:#268bd2">$KUBE_URL</span><span style="color:#2aa198">&#34;</span> --token <span style="color:#2aa198">&#34;</span><span style="color:#268bd2">$KUBE_TOKEN</span><span style="color:#2aa198">&#34;</span>
oc project <span style="color:#2aa198">&#34;</span><span style="color:#268bd2">$KUBE_NAMESPACE</span><span style="color:#2aa198">&#34;</span>

<span style="color:#268bd2">HOSTNAME</span><span style="color:#719e07">=</span><span style="color:#2aa198">&#34;</span><span style="color:#268bd2">$CI_ENVIRONMENT_URL</span><span style="color:#2aa198">&#34;</span>

<span style="color:#586e75"># remove protocol from URL</span>
<span style="color:#268bd2">HOSTNAME</span><span style="color:#719e07">=</span><span style="color:#2aa198">&#34;</span><span style="color:#2aa198">${</span><span style="color:#268bd2">HOSTNAME</span>/<span style="color:#cb4b16">\h</span><span style="color:#268bd2">ttp</span>:<span style="color:#cb4b16">\/\/</span>/<span style="color:#2aa198">}</span><span style="color:#2aa198">&#34;</span>
<span style="color:#268bd2">HOSTNAME</span><span style="color:#719e07">=</span><span style="color:#2aa198">&#34;</span><span style="color:#2aa198">${</span><span style="color:#268bd2">HOSTNAME</span>/<span style="color:#cb4b16">\h</span><span style="color:#268bd2">ttp</span>:<span style="color:#cb4b16">\/\/</span>/<span style="color:#2aa198">}</span><span style="color:#2aa198">&#34;</span>

<span style="color:#268bd2">IMAGE_TAG</span><span style="color:#719e07">=</span><span style="color:#2aa198">&#34;</span><span style="color:#268bd2">$CI_REGISTRY_IMAGE</span><span style="color:#2aa198">:</span><span style="color:#268bd2">$CI_BUILD_REF_NAME</span><span style="color:#2aa198">&#34;</span>
<span style="color:#268bd2">ENV</span><span style="color:#719e07">=</span><span style="color:#2aa198">&#34;</span><span style="color:#268bd2">$CI_ENVIRONMENT_SLUG</span><span style="color:#2aa198">&#34;</span>

<span style="color:#b58900">echo</span> <span style="color:#2aa198">&#34;&gt;&gt; Deleting old application...&#34;</span>
oc delete all -l <span style="color:#2aa198">&#34;app=</span><span style="color:#268bd2">$CI_ENVIRONMENT_SLUG</span><span style="color:#2aa198">&#34;</span>

<span style="color:#b58900">echo</span> <span style="color:#2aa198">&#34;&gt;&gt; Deploying image </span><span style="color:#268bd2">$IMAGE_TAG</span><span style="color:#2aa198"> to env </span><span style="color:#268bd2">$ENV</span><span style="color:#2aa198"> at </span><span style="color:#268bd2">$HOSTNAME</span><span style="color:#2aa198">...&#34;</span>

sed <span style="color:#2aa198">&#34;
</span><span style="color:#2aa198">  s|__HOSTNAME__|</span><span style="color:#268bd2">$HOSTNAME</span><span style="color:#2aa198">|;
</span><span style="color:#2aa198">  s|__ENV__|</span><span style="color:#268bd2">$ENV</span><span style="color:#2aa198">|;
</span><span style="color:#2aa198">  s|__IMAGE_TAG__|</span><span style="color:#268bd2">$IMAGE_TAG</span><span style="color:#2aa198">|;
</span><span style="color:#2aa198">  &#34;</span> k8s/full.yml | oc apply -f -
<span style="color:#719e07">if</span> <span style="color:#719e07">[</span> <span style="color:#268bd2">$?</span> !<span style="color:#719e07">=</span> <span style="color:#2aa198">0</span> <span style="color:#719e07">]</span>; <span style="color:#719e07">then</span>
  <span style="color:#b58900">exit</span> <span style="color:#2aa198">1</span>
<span style="color:#719e07">fi</span>

<span style="color:#b58900">echo</span> <span style="color:#2aa198">&#34;&gt;&gt; Deployed to </span><span style="color:#268bd2">$CI_ENVIRONMENT_URL</span><span style="color:#2aa198">&#34;</span>
</code></pre></div><p class="code-legend">k8s/deploy</p>
<p>Vale ressaltar que é importante marcar os componentes do ambiente com <code>app=$CI_ENVIRONMENT_SLUG</code>, pois é assim que o GitLab consegue encontrar eles e lhe retornar status sobre eles.</p>
<p>Também estou usando um truque de &ldquo;templating&rdquo; com o YAML que define os ambientes para poder inserir as variáveis de cada ambiente nele. Existem outras ferramentas mais avançadas como o <a href="https://github.com/kubernetes/helm">Helm</a>, mas para o meu exemplo templating com <code>sed</code> é o suficiente.</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#268bd2">apiVersion</span>: extensions/v1beta1
<span style="color:#268bd2">kind</span>: Deployment
<span style="color:#268bd2">metadata</span>:
  <span style="color:#268bd2">name</span>: hw-dpl-__ENV__
  <span style="color:#268bd2">labels</span>:
    <span style="color:#268bd2">app</span>: __ENV__
<span style="color:#268bd2">spec</span>:
  <span style="color:#268bd2">replicas</span>: <span style="color:#2aa198">1</span>
  <span style="color:#268bd2">template</span>:
    <span style="color:#268bd2">metadata</span>:
      <span style="color:#268bd2">labels</span>:
        <span style="color:#268bd2">app</span>: __ENV__
        <span style="color:#268bd2">name</span>: hw-pod
    <span style="color:#268bd2">spec</span>:
      <span style="color:#268bd2">containers</span>:
      - <span style="color:#268bd2">name</span>: hw-container
        <span style="color:#268bd2">image</span>: __IMAGE_TAG__
        <span style="color:#268bd2">imagePullPolicy</span>: Always
        <span style="color:#268bd2">ports</span>:
        - <span style="color:#268bd2">name</span>: web-port
          <span style="color:#268bd2">containerPort</span>: <span style="color:#2aa198">8080</span>
---
<span style="color:#268bd2">apiVersion</span>: <span style="color:#2aa198">&#34;v1&#34;</span>
<span style="color:#268bd2">kind</span>: Service
<span style="color:#268bd2">metadata</span>:
  <span style="color:#268bd2">name</span>: hw-src-__ENV__
  <span style="color:#268bd2">labels</span>:
    <span style="color:#268bd2">app</span>: __ENV__
<span style="color:#268bd2">spec</span>:
  <span style="color:#268bd2">ports</span>:
    - <span style="color:#268bd2">port</span>: <span style="color:#2aa198">80</span>
      <span style="color:#268bd2">targetPort</span>: <span style="color:#2aa198">&#34;web-port&#34;</span>
      <span style="color:#268bd2">protocol</span>: TCP
  <span style="color:#268bd2">selector</span>:
    <span style="color:#268bd2">name</span>: hw-pod
    <span style="color:#268bd2">app</span>: __ENV__
---
<span style="color:#268bd2">apiVersion</span>: v1
<span style="color:#268bd2">kind</span>: Route
<span style="color:#268bd2">metadata</span>:
  <span style="color:#268bd2">name</span>: __ENV__
  <span style="color:#268bd2">labels</span>:
    <span style="color:#268bd2">app</span>: __ENV__
<span style="color:#268bd2">spec</span>:
  <span style="color:#268bd2">host</span>: __HOSTNAME__
  <span style="color:#268bd2">to</span>:
    <span style="color:#268bd2">kind</span>: Service
    <span style="color:#268bd2">name</span>: hw-src-__ENV__
</code></pre></div><p class="code-legend">k8s/full.yml</p>
<p>Agora, depois que do commit das alterações, o GitLab faz o <em>build</em>, o deploy da <em>staging</em> e <em>production</em> (manual); podemos ver na área <em>Environments</em> do GitLab que os ambientes estão rodando, ele inclusive traz alguns comandos para facilitar a vida: link para a URL do ambiente, terminal dentro do Pod e opção de Re-deploy.</p>


	

<figure class="big">
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="/post/ambientes-por-branch-com-openshift-next-gen/gilab-envs.png"
		
			width="1000" height="301"
		
	/>
	
</figure>

<p>Fonte completo até agora:</p>
<p><a href="https://gitlab.com/lucassabreu/k8s-pr-envs/tree/v2"><strong>Files · v2 · Lucas dos Santos Abreu / k8s-pr-envs</strong></a></p>
<hr>
<p>Agora que temos o <em>build</em> da nossa aplicação e um deploy automatizado, vamos adicionar a função de deploy por branch.</p>
<p>Basicamente precisamos de duas novas etapas no nosso CI, uma para subir o ambiente para uma branch e outro para destruir esse ambiente para evitar consumir recursos sem necessidade.</p>
<p>Para isso fiz as seguintes alterações nos <code>.gitlab-ci.yml</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#268bd2">stages</span>:
  - build
  - review
  - staging
  - production
  - cleanup

<span style="color:#268bd2">review</span>:
  <span style="color:#268bd2">stage</span>: review
  <span style="color:#268bd2">image</span>: lucassabreu/openshift-k8s-cli:latest
  <span style="color:#268bd2">variables</span>:
    <span style="color:#268bd2">CI_ENVIRONMENT_URL</span>: http://$CI_PROJECT_NAME-$CI_ENVIRONMENT_SLUG.$KUBE_DOMAIN
  <span style="color:#268bd2">environment</span>:
    <span style="color:#268bd2">name</span>: r/$CI_COMMIT_REF_NAME
    <span style="color:#268bd2">url</span>: http://$CI_PROJECT_NAME-$CI_ENVIRONMENT_SLUG.$KUBE_DOMAIN
    <span style="color:#268bd2">on_stop</span>: stop_review
  <span style="color:#268bd2">script</span>:
    - k8s/deploy
  <span style="color:#268bd2">only</span>:
    - branches
  <span style="color:#268bd2">except</span>:
    - master

<span style="color:#268bd2">stop_review</span>:
  <span style="color:#268bd2">stage</span>: cleanup
  <span style="color:#268bd2">image</span>: lucassabreu/openshift-k8s-cli:latest
  <span style="color:#268bd2">environment</span>:
    <span style="color:#268bd2">name</span>: r/$CI_COMMIT_REF_NAME
    <span style="color:#268bd2">action</span>: stop
  <span style="color:#268bd2">when</span>: manual
  <span style="color:#268bd2">variables</span>:
    <span style="color:#268bd2">GIT_STRATEGY</span>: none
  <span style="color:#268bd2">script</span>:
    - oc login &#34;$KUBE_URL&#34; --token &#34;$KUBE_TOKEN&#34;
    - oc project &#34;$KUBE_NAMESPACE&#34;
    - oc delete deployments -l &#34;app=$CI_ENVIRONMENT_SLUG&#34;
    - oc delete all -l &#34;app=$CI_ENVIRONMENT_SLUG&#34;
  <span style="color:#268bd2">only</span>:
    - branches
  <span style="color:#268bd2">except</span>:
    - master

[...]
</code></pre></div><p class="code-legend">.gitlab-ci.yml (v3)</p>
<p>Basicamente adicionei as duas novas etapas, <code>review</code> basicamente faz a mesma coisa que <code>staging</code>, mas usa um nome de ambiente dinâmico baseado na branch; e tem um <code>enviroment:on_stop</code> que basicamente indica o que fazer quando a branch for removida.</p>
<p>Na etapa <code>stop_review</code> executo alguns comandos para eliminar o ambiente quando for chamada, é importante deixar essa como <code>manual</code> para que ela não apague sozinha o ambiente quando terminar as outras etapas.</p>
<p>Os comandos da etapa <code>stop_review</code> precisam estar definidos diretamente no <code>.gitlab-ci.yml</code>, pois quando essa etapa for executada é possível que a branch e commits dela não existam mais, é também por esse motivo que informamos a variável <code>GIT_STRATEGY</code> como <code>NO</code> evitando que sequer seja checado se a branch/commit de origem existem.</p>
<p>Agora quando crio uma nova branch automaticamente é criado um novo ambiente para a mesma no OpenShift.</p>
<p>Para testar criei a branch <code>a-change</code> e fiz a seguinte alteração:</p>
<div class="highlight"><pre tabindex="0" style="color:#93a1a1;background-color:#002b36;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-diff" data-lang="diff">   &lt;img id=&#34;logo&#34; src=&#34;logo.svg&#34;
     alt=&#34;CodeRocker&#34; title=&#34;CodeRocker&#34; /&gt;
   &lt;h1&gt;Hello World !&lt;/h1&gt;
<span style="color:#719e07">+  &lt;h2&gt;(with a change)&lt;/h2&gt;
</span><span style="color:#719e07"></span> &lt;/body&gt;
 &lt;/html&gt;
</code></pre></div><p class="code-legend">public/index.html (pr)</p>
<p>Assim que dei o <code>git push</code> começou o deploy do novo ambiente <code>r/a-change</code>, logo que terminou pude verificar na área de ambientes do GitLab que estava rodando, e tem as mesmas operações disponíveis que os outros, mais a opção de parada (<code>stop_review</code>):</p>


	

<figure class="big">
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="/post/ambientes-por-branch-com-openshift-next-gen/branch-env.png"
		
			width="1000" height="145"
		
	/>
	
</figure>

<p>Já rodando as alterações:</p>


	

<figure >
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="/post/ambientes-por-branch-com-openshift-next-gen/a-change.png"
		
			width="612" height="343"
		
	/>
	
</figure>

<p>Fontes com essas alterações em:</p>
<p><a href="https://gitlab.com/lucassabreu/k8s-pr-envs/tree/v3"><strong>Files · v3 · Lucas dos Santos Abreu / k8s-pr-envs</strong></a></p>
<hr>
<p>Após essas alterações podemos implementar a regra de merge apenas após testes pela equipe de QA, sem interferência de outras atividades que foram aplicadas no meio do caminho e permitindo um controle melhor sobre o que esta pronto para ir para a produção.</p>
<hr>
<p>A postagem acabou ficando bem grande apenas para falar do processo no GitLab, por isso vou criar um segundo post sobre como fazer isso no GitHub, abaixo esta o link para ele:</p>
<p><a href="/post/ambientes-por-branch-com-openshift-next-gen-usando-github"><strong>Ambientes por Branch com OpenShift Next Gen usando GitHub</strong></a></p>]]></content:encoded></item><item><title>Simplificando o Setup de Projetos no GitHub</title><link>https://www.lucassabreu.net.br/preview/9/post/simplificando-setup-projetos-github/</link><pubDate>Tue, 10 Jan 2017 00:00:00 +0000</pubDate><guid>https://www.lucassabreu.net.br/preview/9/post/simplificando-setup-projetos-github/</guid><description>Criamos um script para inicializar as labels dos nossos projetos no GitHub e queremos compartilhar isso</description><image><url>https://www.lucassabreu.net.br/preview/9/feature/post/simplificando-setup-projetos-github/looking-for.gif</url></image><content:encoded><![CDATA[<p>Na <a href="http://blog.coderockr.com/">Coderockr</a> iniciamos e assumimos vários projetos, sejam para clientes que nos contratam ou para ações internas, e normalmente o <a href="http://github.com">GitHub</a> acaba sendo a ferramenta escolhida para eles.</p>
<p>E ao longo dos anos acabamos definindo uma estrutura para controlarmos as nossas issues, usando as seguintes labels:</p>


	

<figure >
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="/post/simplificando-setup-projetos-github/labels.png"
		
			width="704" height="410"
		
	/>
	
		<figcaption><p>Conjunto de labels utilizadas no Coderockr Way</p></figcaption>
	
</figure>

<p>É um conjunto bem simples, mas que deixa bem claro as etapas, prioridades, tipos e estados das tarefas, de forma que fica bem fácil de acompanhá-las.</p>
<p>Em todos os projetos cadastramos essas labels. Mas mesmo que você esteja de bom humor, vai ser um trabalho chato e moroso. E é bem provável que esqueça alguma delas, e precise revisar a lista para garantir que estão todas lá.</p>


	

<figure >
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="/post/simplificando-setup-projetos-github/looking-for.gif"
		
			width="444" height="358"
		
	/>
	
		<figcaption><p>Esqueci o &#34;Stage: Testing&#34;? Achei...</p></figcaption>
	
</figure>

<p>Pensando nessa monotonia e para economizar algum tempo de setup nos projetos resolvemos criar um script que fizesse esse processo, adicionando as labels a um projeto que fosse informado.</p>
<p>O script acabou ficando bem mais simples que o esperado graças a simplicidade da API do GitHub, todo ele foi feito com cURL e alguns loops no bash para as labels.</p>
<p>Até preparamos ele para não precisar ser baixado/instalado, basta dar um cURL direto do repositório do GitHub que ele pede os dados que precisa.</p>


	

<figure >
	<img
		class="lazyload blur-up"
		loading="lazy"
		data-src="/post/simplificando-setup-projetos-github/no-need-for-downloads.png"
		
			width="652" height="108"
		
	/>
	
		<figcaption><p>nem precisa baixar</p></figcaption>
	
</figure>

<p>Resolvemos deixar o script que criamos em um repositório público no GitHub para quem estiver procurando uma solução parecida (ou que agora acha que vale a pena criar um também).</p>
<p>O script e como usá-lo estão aqui:</p>
<p><a href="https://github.com/Coderockr/coderockr-way-github-setup"><strong>Coderockr/coderockr-way-github-setup</strong> - Basic setup to use the Coderockr Way methodology</a></p>
<p>Conclusão, investir um pouco de tempo para entender as ferramentas que você usa, não só te poupa tempo a longo prazo, quanto também gera uns scripts legais de compartilhar :)</p>]]></content:encoded></item></channel></rss>